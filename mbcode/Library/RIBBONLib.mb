'*******************************************************************************
'** 	Created By Peter Horsbøll Møller, Pitney Bowes Software
'** 	Program:
'** 	Modul:
'**
'*******************************************************************************

'-------------------------------------
Include "MapBasic.def"
Include "Enums.def"
Include "Icons.def"
Include "Menu.def"
Include "IMapInfoPro.def"
'**default constants...
Include "Defaults.def"

'-------------------------------------
Include "ARRAYLib.def"
Include "DEBUGLib.def"
Include "ERRORLib.def"
Include "RIBBONLib.def"

Declare Sub RBNInitiate
Declare Function RBNAddElement(	  ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sSplitButtonName As String
							, ByVal sSplitButtonGroupName As String
							, ByVal sControlName As String
							, ByVal nControlType As Integer
							) As Integer
Declare Function RBNRemoveElement(	  ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sSplitButtonName As String
							, ByVal sSplitButtonGroupName As String
							, ByVal sControlName As String
							) As Integer
Declare Function RBNGetElementIndex( ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sSplitButtonName As String
							, ByVal sSplitButtonGroupName As String
							, ByVal sControlName As String
							) As Integer
Declare Function RBNGetElementIndexOffset(	  ByVal sTabName As String
									, ByVal sGroupName As String
									, ByVal sSplitButtonName As String
									, ByVal sSplitButtonGroupName As String
									, ByVal sControlName As String
									, ByVal nOffset As Integer
									) As Integer

Dim	theMapInfoApplication As This,
	theMapBasicApplication As This,
	theMapInfoEvents As This,
	theStatusbar As This,
	theRibbon As This,
	theToolContextMenu As This,
	theTabsColl As This,
	theToolContextMenuItemsColl As This,
	theContextMenus As This,
	theMapMTB As This,
	theMapMTBControlsColl As This,
	theNotification As This,
	mbHasBeenInitiated As Logical

'**These variables keep track of which controls have been added where
Dim	marrControls() As This,
	marrTabNames(), marrGroupNames(), marrSplitButtonNames(), marrSplitButtonGroupNames(), marrControlNames() As String,
	marrControlTypes() As Integer,
	mnNumElements As Integer

'**These variables keep track of which events have been subscribed
Dim 	mnNumEvents As Integer,
	marrEventTypes() As Integer,
	marrEventMBXHandlers() As String,
	mfDefaultLeftMarginInControls As Float	'Default Left Margin for Controls, defaults to 4.0

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNLoop

OnError GoTo ErrorOccured

Dim	nNumTabs, nNumGroups, nNumCntrls, nNumGalleryGroups, nNumGalleryCtrls, nNumSplitCtrlCtrls, nNumDropDownMenuCtrls, nNumDropDownCtrlCtrls, nNumStackPanelCtrls As Integer,
	i, j, k, l, m As Integer,
	sName, sCaption As String,
	nCntrlType As Integer,
	rbnTabItem As This,
	rbnGroupsColl As This,
	rbnGroupItem As This,
	rbnControlsColl As This,
	rbnControlItem As This,
	rbnGalleryGroupsColl As This,
	rbnGalleryGroupItem As This,
	rbnGalleryControlsColl As This,
	rbnGalleryControlItem As This,
	rbnSplitCtrlControlsColl As This,
	rbnSplitCtrlControlItem As This,
	rbnDropDownMenuControlsColl As This,
	rbnDropDownMenuControlItem As This,
	rbnDropDownCtrlControlsColl As This,
	rbnDropDownCtrlControlItem As This,
	rbnStackPanelControlsColl As This,
	rbnStackPanelControlItem As This,
	rbnStatusbarControlsColl As This

	'--------------------------------
	Call RBNInitiate

	nNumTabs = GetRbnTabCollCount(theTabsColl)
'	Call DEBUGPrint("Number of Tabs " & nNumTabs)

	For i = 0 To (nNumTabs - 1)	'**Do note that the collection starts at 0 and not at 1 like normal MapBasic Arrays
		rbnTabItem = GetRbnTabCollItemInt(theTabsColl, i)

		sName	= GetRbnTabName(rbnTabItem)
		sCaption	= GetRbnTabCaption(rbnTabItem)
		Call DEBUGPrint("--------------------------------------------------------------")
		Call DEBUGPrint("Tab " & i & " is named '" & sName & "' but shown as '" & sCaption & "'")

		rbnGroupsColl = GetRbnTabGrps(rbnTabItem)
		nNumGroups = GetRbnCtrlGrpCollCount(rbnGroupsColl)
'		Call DEBUGPrint("   Number of Tab Groups " & nNumGroups)

		For j = 0 To (nNumGroups - 1)
			rbnGroupItem = GetRbnCtrlGrpCollItemInt(rbnGroupsColl, j)

			sName	= GetRbnCtrlGrpName(rbnGroupItem)
			sCaption	= GetRbnCtrlGrpCaption(rbnGroupItem)
			Call DEBUGPrint("   Tab Group " & j & " is named '" & sName & "' but shown as '" & sCaption & "'")

			rbnControlsColl = GetRbnCtrlGrpCtrls(rbnGroupItem)
			nNumCntrls = GetMICtrlCollCount(rbnControlsColl)
'			Call DEBUGPrint("      Number of Controls " & nNumCntrls)

			For k = 0 To (nNumCntrls - 1)
				rbnControlItem	= GetMICtrlCollItemInt(rbnControlsColl, k)

				nCntrlType	= GetMICtrlCtrlType(rbnControlItem)
				sName		= GetMICtrlName(rbnControlItem)
				sCaption		= GetMICtrlCaption(rbnControlItem)
				Call DEBUGPrint("      Control " & k & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")

				Do Case nCntrlType
					Case ControlType_GalleryControl
						rbnGalleryGroupsColl = GetRbnGalleryCtrlGrps(rbnControlItem)
						nNumGalleryGroups 	 = GetMIGalleryGrpCollCount(rbnGalleryGroupsColl)
						Call DEBUGPrint("      Gallery has " & nNumGalleryGroups & " Groups/controls")

						For l = 0 To (nNumGalleryGroups - 1)
							rbnGalleryGroupItem		= GetMIGalleryGrpCollItemInt(rbnGalleryGroupsColl, l)

							sName	= GetRbnGalleryGrpName(rbnGalleryGroupItem)
							sCaption	= GetRbnGalleryGrpCaption(rbnGalleryGroupItem)
							Call DEBUGPrint("      Gallery Group " & l & " is named '" & sName & "' but shown as '" & sCaption & "'")

							rbnGalleryControlsColl	= GetRbnGalleryGrpCtrls(rbnGalleryGroupItem)
							nNumGalleryCtrls		= GetMICtrlCollCount(rbnGalleryControlsColl)

							For m = 0 To (nNumGalleryCtrls - 1)
								rbnGalleryControlItem	= GetMICtrlCollItemInt(rbnGalleryControlsColl, m)

								nCntrlType	= GetMICtrlCtrlType(rbnGalleryControlItem)
								sName		= GetMICtrlName(rbnGalleryControlItem)
								sCaption		= GetMICtrlCaption(rbnGalleryControlItem)
								Call DEBUGPrint("         Gallery Control " & m & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
							Next
						Next

						'GetRbnGalleryCtrlMenuItems - not sure how to work with these yet

					Case ControlType_SplitButton
						rbnSplitCtrlControlsColl	= GetRbnSplitCtrlCtrls(rbnControlItem)
						nNumSplitCtrlCtrls		= GetMICtrlCollCount(rbnSplitCtrlControlsColl)
						Call DEBUGPrint("      SplitButton has " & nNumSplitCtrlCtrls & " Groups/controls")

						For l = 0 To (nNumSplitCtrlCtrls - 1)
							rbnSplitCtrlControlItem	= GetMICtrlCollItemInt(rbnSplitCtrlControlsColl, l)

							nCntrlType	= GetMICtrlCtrlType(rbnSplitCtrlControlItem)
							sName		= GetMICtrlName(rbnSplitCtrlControlItem)
							sCaption		= GetMICtrlCaption(rbnSplitCtrlControlItem)
							Call DEBUGPrint("         SplitButton Control " & l & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")

							If nCntrlType = ControlType_DropDownMenuGroup Then
								rbnDropDownMenuControlsColl	= GetCtrlGrpCtrls(rbnSplitCtrlControlItem)
								nNumDropDownMenuCtrls		= GetMICtrlCollCount(rbnDropDownMenuControlsColl)
								Call DEBUGPrint("            DropDownMenu Control has " & nNumDropDownMenuCtrls & " Controls")

								For m = 0 To (nNumDropDownMenuCtrls - 1)
									rbnDropDownMenuControlItem	= GetMICtrlCollItemInt(rbnDropDownMenuControlsColl, m)

									nCntrlType	= GetMICtrlCtrlType(rbnDropDownMenuControlItem)
									sName		= GetMICtrlName(rbnDropDownMenuControlItem)
									sCaption		= GetMICtrlCaption(rbnDropDownMenuControlItem)
									Call DEBUGPrint("            DropDownMenu Control " & m & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
								Next

							End If
						Next

					Case ControlType_DropDownButton
						rbnDropDownCtrlControlsColl	= GetRbnDropDownCtrlCtrls(rbnControlItem)
						nNumDropDownCtrlCtrls		= GetMICtrlCollCount(rbnDropDownCtrlControlsColl)
						Call DEBUGPrint("      DropDownButton has " & nNumDropDownCtrlCtrls & " Groups/controls")

						For l = 0 To (nNumDropDownCtrlCtrls - 1)
							rbnDropDownCtrlControlItem	= GetMICtrlCollItemInt(rbnDropDownCtrlControlsColl, l)

							nCntrlType	= GetMICtrlCtrlType(rbnDropDownCtrlControlItem)
							sName		= GetMICtrlName(rbnDropDownCtrlControlItem)
							sCaption		= GetMICtrlCaption(rbnDropDownCtrlControlItem)
							Call DEBUGPrint("         DropDownButton Control " & l & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")

							If nCntrlType = ControlType_DropDownMenuGroup Then
								rbnDropDownMenuControlsColl	= GetCtrlGrpCtrls(rbnDropDownCtrlControlItem)
								nNumDropDownMenuCtrls		= GetMICtrlCollCount(rbnDropDownMenuControlsColl)
								Call DEBUGPrint("            DropDownMenu Control has " & nNumDropDownMenuCtrls & " Controls")

								For m = 0 To (nNumDropDownMenuCtrls - 1)
									rbnDropDownMenuControlItem	= GetMICtrlCollItemInt(rbnDropDownMenuControlsColl, m)

									nCntrlType	= GetMICtrlCtrlType(rbnDropDownMenuControlItem)
									sName		= GetMICtrlName(rbnDropDownMenuControlItem)
									sCaption		= GetMICtrlCaption(rbnDropDownMenuControlItem)
									Call DEBUGPrint("            DropDown Control " & m & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
								Next

							End If
						Next

				End Case
			Next
		Next
	Next

	nNumCntrls = GetMICtrlCollCount(theMapMTBControlsColl)
	Call DEBUGPrint("   Map MiniToolBar: Number of Controls " & nNumCntrls)
	For i = 0 To (nNumCntrls - 1)
		rbnControlItem	= GetMICtrlCollItemInt(theMapMTBControlsColl, i)

		sName		= GetMICtrlName(rbnControlItem)
		nCntrlType	= GetMICtrlCtrlType(rbnControlItem)
		sCaption		= GetMICtrlCaption(rbnControlItem)
		Call DEBUGPrint("      MiniToolBar Control " & i & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")

		If nCntrlType = ControlType_StackPanel Then
			rbnStackPanelControlsColl	= GetIStackPanelCtrls(rbnControlItem)
			nNumStackPanelCtrls			= GetMICtrlCollCount(rbnStackPanelControlsColl)

			For l = 0 To (nNumStackPanelCtrls - 1)
				rbnStackPanelControlItem	= GetMICtrlCollItemInt(rbnStackPanelControlsColl, l)

				nCntrlType	= GetMICtrlCtrlType(rbnStackPanelControlItem)
				sName		= GetMICtrlName(rbnStackPanelControlItem)
				sCaption		= GetMICtrlCaption(rbnStackPanelControlItem)
				Call DEBUGPrint("         StackPanel Control " & l & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
			Next
		End If

	Next

	rbnStatusbarControlsColl	= GetIStatusBarCtrls(theStatusbar)
	nNumCntrls 			= GetMICtrlCollCount(rbnStatusbarControlsColl)
	Call DEBUGPrint("   Statusbar: Number of Controls " & nNumCntrls)
	For k = 0 To (nNumCntrls - 1)
		rbnControlItem	= GetMICtrlCollItemInt(rbnStatusbarControlsColl, k)

		nCntrlType	= GetMICtrlCtrlType(rbnControlItem)
		sName		= GetMICtrlName(rbnControlItem)
		sCaption		= GetMICtrlCaption(rbnControlItem)
		Call DEBUGPrint("      Statusbar Control " & k & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTabItem 				= NULL_PTR
	rbnGroupsColl				= NULL_PTR
	rbnGroupItem				= NULL_PTR
	rbnControlsColl			= NULL_PTR
	rbnControlItem				= NULL_PTR
	rbnGalleryGroupsColl		= NULL_PTR
	rbnGalleryGroupItem			= NULL_PTR
	rbnGalleryControlsColl		= NULL_PTR
	rbnGalleryControlItem		= NULL_PTR
	rbnSplitCtrlControlsColl		= NULL_PTR
	rbnSplitCtrlControlItem		= NULL_PTR
	rbnDropDownMenuControlsColl	= NULL_PTR
	rbnDropDownMenuControlItem	= NULL_PTR
	rbnDropDownCtrlControlsColl	= NULL_PTR
	rbnDropDownCtrlControlItem	= NULL_PTR
	rbnStackPanelControlsColl	= NULL_PTR
	rbnStackPanelControlItem		= NULL_PTR
	rbnStatusbarControlsColl		= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNLoop")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNLoopContext

Dim	nNumTabs, nNumGroups, nNumCntrls, i, j, k As Integer,
	sName, sCaption As String,
	nCntrlType As Integer,
	rbnTabItem As This,
	rbnTabsColl As This,
	rbnGroupsColl As This,
	rbnGroupItem As This,
	rbnControlsColl As This,
	rbnControlItem As This

	'--------------------------------
	Call RBNInitiate

	rbnGroupsColl	= GetCntxtTabGrpsColl(theRibbon)
	nNumGroups	= GetRbnCntxtTabGrpCollCount(rbnGroupsColl)
	Call DEBUGPrint("   RBNGetContextGroup: Number of Tab Groups " & nNumGroups)
	For i = 0 To (nNumGroups - 1)
		rbnGroupItem = GetRbnCntxtTabGrpCollItemInt(rbnGroupsColl, i)

		sName	= GetRbnCntxtTabGrpName(rbnGroupItem)
		sCaption	= GetRbnCntxtTabGrpCaption(rbnGroupItem)
		Call DEBUGPrint("   Tab Group " & j & " is named '" & sName & "' but shown as '" & sCaption & "'")

		rbnTabsColl = GetRbnCntxtTabGrpTabs(rbnGroupItem)
'		rbnGroupsColl = GetRbnTabGrps(rbnGroupItem)

		nNumGroups = GetRbnCtrlGrpCollCount(rbnTabsColl)
'		Call DEBUGPrint("   Number of Tab Groups " & nNumGroups)

		For j = 0 To (nNumGroups - 1)
			rbnGroupItem = GetRbnCtrlGrpCollItemInt(rbnGroupsColl, j)

			sName	= GetRbnCtrlGrpName(rbnGroupItem)
			sCaption	= GetRbnCtrlGrpCaption(rbnGroupItem)
			Call DEBUGPrint("   Tab Group " & j & " is named '" & sName & "' but shown as '" & sCaption & "'")

			rbnControlsColl = GetRbnCtrlGrpCtrls(rbnGroupItem)
			nNumCntrls = GetMICtrlCollCount(rbnControlsColl)
'			Call DEBUGPrint("      Number of Controls " & nNumCntrls)

			For k = 0 To (nNumCntrls - 1)
				rbnControlItem	= GetMICtrlCollItemInt(rbnControlsColl, k)

				nCntrlType	= GetMICtrlCtrlType(rbnControlItem)
				sName		= GetMICtrlName(rbnControlItem)
				sCaption		= GetMICtrlCaption(rbnControlItem)
				Call DEBUGPrint("      Control " & k & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
			Next
		Next
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTabItem		= NULL_PTR
	rbnTabsColl		= NULL_PTR
	rbnGroupsColl		= NULL_PTR
	rbnGroupItem		= NULL_PTR
	rbnControlsColl	= NULL_PTR
	rbnControlItem		= NULL_PTR


	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNLoopContext")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNControlGetTypeName(ByVal nCtrlType As Integer) As String

OnError GoTo ErrorOccured

	Do Case nCtrlType
		Case ControlType_Button 				'1
			RBNControlGetTypeName	= "Button"
		Case ControlType_ToolButton			'2
			RBNControlGetTypeName	= "ToolButton"
		Case ControlType_RibbonMenuItem		'3
			RBNControlGetTypeName	= "RibbonMenuItem"
		Case ControlType_RibbonButtonPanel		'4
			RBNControlGetTypeName	= "RibbonButtonPanel"
		Case ControlType_RibbonSeparator 		'5
			RBNControlGetTypeName	= "RibbonSeparator"
		Case ControlType_ContextMenuItem		'6
			RBNControlGetTypeName	= "ContextMenuItem"
		Case ControlType_ContextMenuSeparator 	'7
			RBNControlGetTypeName	= "ContextMenuSeparator"
		Case ControlType_MenuItemSeparator		'8
			RBNControlGetTypeName	= "MenuItemSeparator"
		Case ControlType_DropDownButton		'9
			RBNControlGetTypeName	= "DropDownButton"
		Case ControlType_SplitButton			'10
			RBNControlGetTypeName	= "SplitButton"
		Case ControlType_DropDownMenuGroup		'11
			RBNControlGetTypeName	= "DropDownMenuGroup"
		Case ControlType_GalleryControl		'12
			RBNControlGetTypeName	= "GalleryControl"
		Case ControlType_GalleryItem			'13
			RBNControlGetTypeName	= "GalleryItem"
		Case ControlType_GalleryGroup			'14
			RBNControlGetTypeName	= "GalleryGroup"
		Case ControlType_CustomControl		'15
			RBNControlGetTypeName	= "CustomControl"
		Case ControlType_TextBlock			'16
			RBNControlGetTypeName	= "TextBlock"
		Case ControlType_Image				'17
			RBNControlGetTypeName	= "Image"
		Case ControlType_BackStageTabItem		'18
			RBNControlGetTypeName	= "BackStageTabItem"
		Case ControlType_BackStageButton		'19
			RBNControlGetTypeName	= "BackStageButton"
		Case ControlType_BackStageTabSection	'20
			RBNControlGetTypeName	= "BackStageTabSection"
		Case ControlType_BackStageSeparator	'21
			RBNControlGetTypeName	= "BackStageSeparator"
		Case ControlType_StackPanel			'22
			RBNControlGetTypeName	= "StackPanel"
		Case ControlType_Unknown				'23
			RBNControlGetTypeName	= "Unknown"
	End Case

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlGetTypeName")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNInitiate

OnError GoTo ErrorOccured

	If mbHasBeenInitiated Then
		Exit Sub
	End If

	mfDefaultLeftMarginInControls	= 4.0

	'--------------------------------
	'Get MIPro interface
	theMapInfoApplication	= SystemInfo(SYS_INFO_IMAPINFOAPPLICATION)
	'Get Ribbon
	theRibbon 			= GetRibbon(theMapInfoApplication)
	'Get the Statusbar
	theStatusbar			= GetStatusBar(theMapInfoApplication)
	'Get Tabs Collection
	theTabsColl 			= GetTabsColl(theRibbon)

	Call RegisterUriParser(New_GenericUriParser(1), "pack", -1)

	'--------------------------------
	'Get MapBasic interface
	theMapBasicApplication	= MapBasicApplication(theMapInfoApplication, ApplicationName$())
	'Get the events for the MapBasic application
	theMapInfoEvents		= MIEventsInitEvents(theMapInfoApplication, theMapBasicApplication)
	'Get the Notification window
	theNotification = New_NotificationObject ()

	'--------------------------------
	'Get the Context Menu for the MapBasic application
	theToolContextMenu 			= GetIMBXMenu(theMapBasicApplication)
	theToolContextMenuItemsColl	= GetICntxtMnuCtrls(theToolContextMenu)

	'--------------------------------
	'Get the Groups Collection for the Map MiniToolbar
	theContextMenus		= GetContextMenus(theMapInfoApplication)
	theMapMTB				= GetICntxtMnusMapMiniToolBar(theContextMenus)
	theMapMTBControlsColl	= GetIMapMiniToolBarCtrls(theMapMTB)

	mbHasBeenInitiated = TRUE

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNInitiate")
	Call ERRShow()

End Sub

'*******************************************************************************************************
'** WORKING WITH TABS **********************************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNAddTab(		  ByVal sTabName As String
					, ByVal sCaption As String
					, ByVal sKeytip As String
					) As Integer

Dim	nCtrl As Integer

OnError GoTo ErrorOccured

RBNAddTab = 0

	Call RBNInitiate

	nCtrl = RBNAddElement(sTabName, "", "", "", "", CONTROL_TYPE_RLIB_TAB)

	'Add a new Tab to theTabsColl collection
	marrControls(nCtrl) = RbnTabCollAddStrStr(theTabsColl, sTabName, sCaption)

	If sKeytip <> "" Then
		'Set the KeyTip for the RibbonTab. KeyTip: The keyboard shortcut for
		'the tab. A KeyTip must have from 1 to 3 uppercase characters.
		Call SetRbnItemKeyTip(marrControls(nCtrl), sKeytip)
	End If

	RBNAddTab = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNAddTab: " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNRemoveTab(	  ByVal sTabName As String
					) As Integer

Dim	rbnTab As This,
	nCtrl, nTabItem As Integer

OnError GoTo ErrorOccured

RBNRemoveTab = 0

	Call RBNInitiate

	nTabItem	= RBNGetTabIndex(sTabName)
	If nTabItem > RBN_ELEMENT_NOT_FOUND Then
		Call RbnTabCollRemoveAt(theTabsColl, nTabItem)

		nCtrl = RBNRemoveElement(sTabName, "", "", "", "")
		RBNRemoveTab = nCtrl
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTab		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNRemoveTab: " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNTabSetToolTipThs(	  rbnTab As This
					, ByVal sText As String
					, ByVal sDescription As String
					, ByVal sDisabledText As String)

OnError GoTo ErrorOccured

	Call RBNControlSetToolTipThs(rbnTab, sText, sDescription, sDisabledText)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabSetToolTip")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNTabSetToolTip( ByVal sTabName As String
				, ByVal sText As String
				, ByVal sDescription As String
				, ByVal sDisabledText As String)

Dim	rbnTabFound As RefPtr,
	rbnTab As This

OnError GoTo ErrorOccured

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound
		Call RBNTabSetToolTipThs(rbnTab, sText, sDescription, sDisabledText)
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTabFound 	= NULL_PTR
	rbnTab		= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabSetToolTip")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNTabSetToolTipIdx(	  ByVal nTabIdx As Integer
					, ByVal sText As String
					, ByVal sDescription As String
					, ByVal sDisabledText As String)

OnError GoTo ErrorOccured

	Call RBNTabSetToolTipThs(marrControls(nTabIdx), sText, sDescription, sDisabledText)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabSetToolTipIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNTabEnableThs(  ByVal rbnTab As This
				, ByVal bEnabled As Logical)

OnError GoTo ErrorOccured

	Call SetRbnTabEnabled(rbnTab, bEnabled)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabEnableThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNTabEnableIdx(  ByVal nTabIdx As Integer
				, ByVal bEnabled As Logical)

OnError GoTo ErrorOccured

	Call RBNTabEnableThs(marrControls(nTabIdx), bEnabled)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabEnableIdx: " & nTabIdx)
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGetTab(	  ByVal sTabName As String
				, rbnTabFound As RefPtr
				) As Logical

Dim	nTabIndex As Integer,
	rbnTabItem as This

OnError GoTo ErrorOccured

RBNGetTab = FALSE

	nTabIndex	= RBNGetTabIndex(sTabName)
	If nTabIndex > RBN_ELEMENT_NOT_FOUND Then
		rbnTabItem	= GetRbnTabCollItemInt(theTabsColl, nTabIndex)
		rbnTabFound	= rbnTabItem
		RBNGetTab		= TRUE
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTabItem	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetTab")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGetTabIndex(	ByVal sTabName As String
					) As Integer

Dim i, nNumTabs As Integer,
	sName, sCaption As String,
	rbnTabItem as This

OnError GoTo ErrorOccured

RBNGetTabIndex = RBN_ELEMENT_NOT_FOUND

	Call RBNInitiate

	nNumTabs = GetRbnTabCollCount(theTabsColl)
'	Call DEBUGPrint("Number of Tabs " & nNumTabs)
	For i = 0 To (nNumTabs - 1)	'**First element is at position 0, not as normally in MapBasic at position 1
		rbnTabItem = GetRbnTabCollItemInt(theTabsColl, i)

		sName	= GetRbnTabName(rbnTabItem)
'		sCaption	= GetRbnTabCaption(rbnTabItem)
'		Call DEBUGPrint("Tab " & i & " is named " & sName & " but shown as " & sCaption)

		If sName = sTabName Then
			RBNGetTabIndex	= i
			rbnTabItem	= NULL_PTR

			Exit Function
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTabItem		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetTabIndex")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabExists(	  ByVal sTabName As String
					) As Logical

OnError GoTo ErrorOccured

	RBNTabExists = (RBNGetTabIndex(sTabName) > RBN_ELEMENT_NOT_FOUND)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabExists")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabExistsCaption(	  ByVal sTabCaption As String
						) As Logical

OnError GoTo ErrorOccured

	RBNTabExistsCaption = (RBNTabGetNameFromCaption(sTabName) <> "")
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabExistsCaption")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabGetNameFromCaption(	  ByVal sTabCaption As String
							) As String

OnError GoTo ErrorOccured

Dim i, nNumTabs As Integer,
	sName, sCaption As String,
	rbnTabItem as This

OnError GoTo ErrorOccured

RBNTabGetNameFromCaption = ""

	Call RBNInitiate

	nNumTabs = GetRbnTabCollCount(theTabsColl)
'	Call DEBUGPrint("Number of Tabs " & nNumTabs)
	For i = 0 To (nNumTabs - 1)	'**First element is at position 0, not as normally in MapBasic at position 1
		rbnTabItem = GetRbnTabCollItemInt(theTabsColl, i)

		sName	= GetRbnTabName(rbnTabItem)
		sCaption	= GetRbnTabCaption(rbnTabItem)
'		Call DEBUGPrint("Tab " & i & " is named " & sName & " but shown as " & sCaption)

		If sCaption = sTabCaption Then
			RBNTabGetNameFromCaption	= sName
			rbnTabItem	= NULL_PTR

			Exit Function
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTabItem		= NULL_PTR
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabGetNameFromCaption: Caption: " & sTabCaption)
	Call ERRShow()

End Function


'*******************************************************************************************************
'** WORKING WITH GROUPS ON TABS ************************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Function RBNTabNumGroups(	  ByVal sTabName As String
						) As Integer

Dim	rbnTabFound As RefPtr,
	rbnTab, rbnGroupsColl As This

OnError GoTo ErrorOccured

RBNTabNumGroups = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		rbnGroupsColl		= GetRbnTabGrps(rbnTab)
		RBNTabNumGroups	= GetRbnCtrlGrpCollCount(rbnGroupsColl)
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTabFound	= NULL_PTR
	rbnTab		= NULL_PTR
	rbnGroupsColl	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabNumGroups")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabAddGroup(	  ByVal sGroupName As String
					, ByVal sCaption As String
					, ByVal sTabName As String
					) As Integer

Dim	rbnTab As This,
	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	nCtrl As Integer

OnError GoTo ErrorOccured

RBNTabAddGroup = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		nCtrl = RBNAddElement(sTabName, sGroupName, "", "", "", CONTROL_TYPE_RLIB_GROUP)

		'Get the ribbon group collection.
		rbnGroupsColl	= GetRbnTabGrps(rbnTab)
		'Add a new group.
		marrControls(nCtrl)		= RbnCtrlGrpCollAddStrStr(rbnGroupsColl, sGroupName, sCaption)

		'Disable the RibbonDialogLauncher. (A RibbonDialogLauncher is displayed in the
		'lower-right corner of a group by default.)
		Call SetRbnCtrlGrpIsLauncherVisible(marrControls(nCtrl), FALSE)

		RBNTabAddGroup = nCtrl
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnGroupsColl	= NULL_PTR
	rbnTabFound	= NULL_PTR
	rbnGroupFound	= NULL_PTR
	rbnTab		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabAddGroup: " & sGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabGroupRemove(	  ByVal sGroupName As String
						, ByVal sTabName As String
						) As Integer

Dim	rbnGroup As This,
	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnTab As This,
	nCtrl, nGroupItem As Integer

OnError GoTo ErrorOccured

RBNTabGroupRemove = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		nGroupItem = RBNTabGetGroupIndexThs(rbnTab, sGroupName)
		If nGroupItem > RBN_ELEMENT_NOT_FOUND Then
			'Get the ribbon group collection.
			rbnGroupsColl	= GetRbnTabGrps(rbnTab)
			'Remove the group
			Call RbnCtrlGrpCollRemoveAt(rbnGroupsColl, nGroupItem)

			nCtrl = RBNRemoveElement(sTabName, sGroupName, "", "", "")
			RBNTabGroupRemove = nCtrl
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnGroup		= NULL_PTR
	rbnGroupsColl	= NULL_PTR
	rbnTabFound	= NULL_PTR
	rbnGroupFound	= NULL_PTR
	rbnTab		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabGroupRemove: " & sGroupName & " from tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabGetGroupThs(	  rbnTab As This
						, ByVal sGroupName As String
						, rbnGroupFound As RefPtr
						) As Logical

Dim	i, nGroupIndex As Integer,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNTabGetGroupThs = FALSE

	nGroupIndex	= RBNTabGetGroupIndexThs(rbnTab, sGroupName)
	If nGroupIndex > RBN_ELEMENT_NOT_FOUND Then
		rbnGroupsColl	= GetRbnTabGrps(rbnTab)

		rbnGroupItem 		= GetRbnCtrlGrpCollItemInt(rbnGroupsColl, nGroupIndex)
		rbnGroupFound		= rbnGroupItem

		RBNTabGetGroupThs	= TRUE
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnGroupsColl	= NULL_PTR
'	rbnGroupItem	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabGetGroupThs")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabGetGroup(	  ByVal sTabName As String
					, ByVal sGroupName As String
					, rbnGroupFound As RefPtr
					) As Logical

Dim	rbnTab As This,
	rbnTabFound As RefPtr

OnError GoTo ErrorOccured

RBNTabGetGroup = FALSE

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		RBNTabGetGroup	= RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound)
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTab		= NULL_PTR
	rbnTabFound	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabGetGroup")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabGetGroupIndex(	  ByVal sTabName As String
						, ByVal sGroupName As String
						) As Integer

Dim	rbnTabFound As RefPtr,
	rbnTab As This

OnError GoTo ErrorOccured

RBNTabGetGroupIndex = RBN_ELEMENT_NOT_FOUND

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		RBNTabGetGroupIndex	= RBNTabGetGroupIndexThs(rbnTab, sGroupName)
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTabFound	= NULL_PTR
	rbnTab		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabGetGroupIndex")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabGetGroupIndexThs(	  rbnTab As This
							, ByVal sGroupName As String
							) As Integer

Dim	i, nNumGroups As Integer,
	sName, sCaption As String,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNTabGetGroupIndexThs = RBN_ELEMENT_NOT_FOUND

'	Call DEBUGPrint("   RBNTabGetGroupIndexThs: Looking for " & sGroupName & " rbnTab = " & rbnTab)

	rbnGroupsColl = GetRbnTabGrps(rbnTab)
	nNumGroups = GetRbnCtrlGrpCollCount(rbnGroupsColl)
'	Call DEBUGPrint("   RBNTabGetGroupIndexThs: Number of Tab Groups " & nNumGroups)
	For i = 0 To (nNumGroups - 1)
		rbnGroupItem = GetRbnCtrlGrpCollItemInt(rbnGroupsColl, i)

		sName	= GetRbnCtrlGrpName(rbnGroupItem)
'		sCaption	= GetRbnCtrlGrpCaption(rbnGroupItem)
'		Call DEBUGPrint("   Tab Ctrl Group " & i & " is named " & sName & " but shown as " & sCaption)

		If sName = sGroupName Then
			RBNTabGetGroupIndexThs	= i

			'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
			'This is necessary to avoid memory leaks and unnecessary variable references.
			rbnGroupsColl		= NULL_PTR
			rbnGroupItem		= NULL_PTR
			Exit Function
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnGroupsColl	= NULL_PTR
	rbnGroupItem	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabGetGroupIndexThs")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabGroupExists(	  ByVal sTabName As String
						, ByVal sGroupName As String
						) As Logical

OnError GoTo ErrorOccured

	RBNTabGroupExists = (RBNTabGetGroupIndex(sTabName, sGroupName) > RBN_ELEMENT_NOT_FOUND)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabGroupExists")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabGroupExistsThs(  rbnTab As This
						, ByVal sGroupName As String
						) As Logical

OnError GoTo ErrorOccured

	RBNTabGroupExistsThs = (RBNTabGetGroupIndexThs(rbnTab, sGroupName) > RBN_ELEMENT_NOT_FOUND)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabGroupExistsThs")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH CONTROLS AND BUTTONS ON GROUPS ********************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Function RBNGroupNumControls(	  ByVal sGroupName As String
						, ByVal sTabName As String
						) As Integer

Dim	rbnTabFound, rbnGroupFound As RefPtr,
	rbnTab, rbnGroup, rbnControlsColl As This

OnError GoTo ErrorOccured

RBNGroupNumControls = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			rbnGroup				= rbnGroupFound

			rbnControlsColl 		= GetRbnCtrlGrpCtrls(rbnGroup)
			RBNGroupNumControls	= GetMICtrlCollCount(rbnControlsColl)
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTabFound		= NULL_PTR
	rbnGroupFound		= NULL_PTR
	rbnTab			= NULL_PTR
	rbnGroup			= NULL_PTR
	rbnControlsColl	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupNumControls")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupSetToolTipThs(	  rbnGroup As This
						, ByVal sText As String
						, ByVal sDescription As String
						, ByVal sDisabledText As String)

OnError GoTo ErrorOccured

	Call RBNControlSetToolTipThs(rbnGroup, sText, sDescription, sDisabledText)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupSetToolTip")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupSetToolTip(	  ByVal sTabName As String
					, ByVal sGroupName As String
					, ByVal sText As String
					, ByVal sDescription As String
					, ByVal sDisabledText As String)

Dim	rbnTabFound, rbnGroupFound As RefPtr,
	rbnTab, rbnGroup As This

OnError GoTo ErrorOccured

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			rbnGroup	= rbnGroupFound

			Call RBNGroupSetToolTipThs(rbnGroup, sText, sDescription, sDisabledText)
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTabFound	= NULL_PTR
	rbnGroupFound	= NULL_PTR
	rbnTab		= NULL_PTR
	rbnGroup		= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupSetToolTip")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupSetToolTipIdx(	  ByVal nGroupIdx As Integer
						, ByVal sText As String
						, ByVal sDescription As String
						, ByVal sDisabledText As String)

OnError GoTo ErrorOccured

	Call RBNGroupSetToolTip(marrControls(nGroupIdx), marrGroupNames(nGroupIdx), sText, sDescription, sDisabledText)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupSetToolTipIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupEnableThs(	  ByVal rbnGroup As This
					, ByVal bEnabled As Logical)

OnError GoTo ErrorOccured

	Call SetRbnCtrlGrpEnabled(rbnGroup, bEnabled)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabEnableThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupEnableIdx(	  ByVal nGroupIdx As Integer
					, ByVal bEnabled As Logical)

OnError GoTo ErrorOccured

	Call RBNGroupEnableThs(marrControls(nGroupIdx), bEnabled)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupEnableIdx: " & nTabIdx)
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupAddControl(	  ByVal sControlName As String
						, ByVal sCaption As String
						, ByVal sKeytip As String
						, ByVal nControlType As Integer
						, ByVal sTabName As String
						, ByVal sGroupName As String
						) As Integer

Dim	rbnGroup As This,
	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnTab As This,
	nCtrl As Integer

OnError GoTo ErrorOccured

RBNGroupAddControl = 0

	Call RBNInitiate

'	Call DEBUGPrint("RBNGetTab")
	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

'		Call DEBUGPrint("RBNTabGetGroupThs")
		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then

			rbnGroup = rbnGroupFound
			'Get Group controls collection
			rbnGroupsColl = GetRbnCtrlGrpCtrls(rbnGroup)

			nCtrl 			= RBNAddElement(GetRbnTabName(rbnTab), GetRbnCtrlGrpName(rbnGroup), "", "", sControlName, nControlType)
			marrControls(nCtrl) = MICtrlCollAddStrStrInt(rbnGroupsColl, sControlName, sCaption, nControlType)

			If sKeytip <> "" Then
				'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
				'A KeyTip must have from 1 to 3 uppercase characters.
				Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
			End If

			RBNGroupAddControl = nCtrl
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnGroup		= NULL_PTR
	rbnGroupsColl	= NULL_PTR
	rbnTabFound	= NULL_PTR
	rbnGroupFound	= NULL_PTR
	rbnTab		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupAddControl: " & sControlName & " to " & sGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupRemoveControl(	  ByVal sControlName As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							) As Integer

Dim	rbnGroup As This,
	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnTab As This,
	nCtrl, nControlItem As Integer

OnError GoTo ErrorOccured

RBNGroupRemoveControl = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			rbnGroup = rbnGroupFound

			nControlItem = RBNGroupGetControlIndexThs(rbnGroup, sControlName)
			If nControlItem > RBN_ELEMENT_NOT_FOUND Then
				'Get Group controls collection
				rbnGroupsColl = GetRbnCtrlGrpCtrls(rbnGroup)

				Call MICtrlCollRemoveAt(rbnGroupsColl, nControlItem)
				nCtrl = RBNRemoveElement(sTabName, sGroupName, "", "", sControlName)
				RBNGroupRemoveControl = nCtrl
			Else
				Call DEBUGPrint("RBNGroupRemoveControl: Control not found: " & sControlName)
			End If
		Else
			Call DEBUGPrint("RBNGroupRemoveControl: Group not found: " & sGroupName)
		End If
	Else
		Call DEBUGPrint("RBNGroupRemoveControl: Tab not found: " & sTabName)
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnGroup		= NULL_PTR
	rbnGroupsColl	= NULL_PTR
	rbnTabFound	= NULL_PTR
	rbnGroupFound	= NULL_PTR
	rbnTab		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupRemoveControl: " & sControlName & " from " & sGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupInsertControl( ByVal sControlName As String
						, ByVal sCaption As String
						, ByVal sKeytip As String
						, ByVal nControlType As Integer
						, ByVal sTabName As String
						, ByVal sGroupName As String
						, ByVal nPosition As Integer
						) As Integer

Dim	rbnGroup As This,
	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnTab As This,
	nCtrl As Integer

OnError GoTo ErrorOccured

RBNGroupInsertControl = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then

			rbnGroup = rbnGroupFound
			'Get Group controls collection
			rbnGroupsColl = GetRbnCtrlGrpCtrls(rbnGroup)

			nCtrl 			= RBNAddElement(GetRbnTabName(rbnTab), GetRbnCtrlGrpName(rbnGroup), "", "", sControlName, nControlType)
			marrControls(nCtrl) = MICtrlCollInsertIntStrStrInt(rbnGroupsColl, nPosition, sControlName, sCaption, nControlType)

			If sKeytip <> "" Then
				'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
				'A KeyTip must have from 1 to 3 uppercase characters.
				Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
			End If


			RBNGroupInsertControl = nCtrl
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnGroup 		= NULL_PTR
	rbnGroupsColl	= NULL_PTR
	rbnTabFound	= NULL_PTR
	rbnGroupFound	= NULL_PTR
	rbnTab		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupInsertControl: " & sControlName & " at position " & nPosition & " in " & sGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupInsertControlAfter( ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal sKeytip As String
							, ByVal nControlType As Integer
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sNameAfter As String
							) As Integer

Dim	nPosition As Integer

OnError GoTo ErrorOccured

RBNGroupInsertControlAfter = 0

	nPosition = RBNControlGetIndex(sTabName, sGroupName, sNameAfter)
	If nPosition = 0 Then
		RBNGroupInsertControlAfter 	= RBNGroupAddControl(sControlName, sCaption, sKeytip, nControlType, sTabName, sGroupName)
	Else
		nPosition				= nPosition + 1
		RBNGroupInsertControlAfter 	= RBNGroupInsertControl(sControlName, sCaption, sKeytip, nControlType, sTabName, sGroupName, nPosition)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupInsertControlAfter: " & sControlName & " after " & sNameAfter & " in " & sGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupInsertControlBefore(	  ByVal sControlName As String
								, ByVal sCaption As String
								, ByVal sKeytip As String
								, ByVal nControlType As Integer
								, ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal sNameBefore As String
								) As Integer

Dim	nPosition As Integer

OnError GoTo ErrorOccured

RBNGroupInsertControlBefore = 0

	nPosition = RBNControlGetIndex(sTabName, sGroupName, sNameBefore)
	If nPosition = 0 Then
		RBNGroupInsertControlBefore 	= RBNGroupAddControl(sControlName, sCaption, sKeytip, nControlType, sTabName, sGroupName)
	Else
		RBNGroupInsertControlBefore 	= RBNGroupInsertControl(sControlName, sCaption, sKeytip, nControlType, sTabName, sGroupName, nPosition)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupInsertControlBefore: " & sControlName & " before " & sNameBefore & " in " & sGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupAddButton(	  ByVal sControlName As String
						, ByVal sCaption As String
						, ByVal sKeytip As String
						, ByVal sTabName As String
						, ByVal sGroupName As String
						) As Integer

OnError GoTo ErrorOccured

	RBNGroupAddButton = RBNGroupAddControl(sControlName, sCaption, sKeytip, ControlType_Button, sTabName, sGroupName)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupAddButton")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupInsertButton(  ByVal sControlName As String
						, ByVal sCaption As String
						, ByVal sKeytip As String
						, ByVal sTabName As String
						, ByVal sGroupName As String
						, ByVal nPosition As Integer
						) As Integer


OnError GoTo ErrorOccured

	RBNGroupInsertButton = RBNGroupInsertControl(sControlName, sCaption, sKeytip, ControlType_Button, sTabName, sGroupName, nPosition)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupInsertButton")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupInsertButtonAfter(  ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal sKeytip As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sNameAfter As String
							) As Integer

Dim	nPosition As Integer

OnError GoTo ErrorOccured

	RBNGroupInsertButtonAfter = RBNGroupInsertControlAfter(sControlName, sCaption, sKeytip, ControlType_Button, sTabName, sGroupName, sNameAfter)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupInsertButtonAfter")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupInsertButtonBefore( ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal sKeytip As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sNameBefore As String
							) As Integer

OnError GoTo ErrorOccured

	RBNGroupInsertButtonBefore = 	RBNGroupInsertControlBefore(sControlName, sCaption, sKeytip, ControlType_Button, sTabName, sGroupName, sNameBefore)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupInsertButtonBefore")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupEnableControls(	  ByVal sTabName As String
						, ByVal sGroupName As String
						, ByVal sControlName As String
						, ByVal bEnabled As Logical)

Dim	nElementIdx As Integer

OnError GoTo ErrorOccured

	nElementIdx	= 0
	nElementIdx	= RBNGetElementIndexOffset(sTabName, sGroupName, "", "", sControlName, (nElementIdx + 1))
	Do While (nElementIdx > 0)

		Call RBNControlEnableThs(marrControls(nElementIdx), bEnabled)

		nElementIdx = RBNGetElementIndexOffset(sTabName, sGroupName, "", "", sControlName, (nElementIdx + 1))
	Loop

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupEnableControls")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupEnableControl(  ByVal sTabName As String
					, ByVal sGroupName As String
					, ByVal sControlName As String
					, ByVal bEnabled As Logical)

Dim	nElementIdx As Integer

OnError GoTo ErrorOccured

	nElementIdx	= RBNGetElementIndex(sTabName, sGroupName, "", "", sControlName)
	If nElementIdx > 0 Then
		Call RBNControlEnableThs(marrControls(nElementIdx), bEnabled)
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupEnableControl")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupGetControlThs(	  rbnGroup As This
							, ByVal sControlName As String
							, rbnControlFound As RefPtr
							) As Logical

Dim	nControlIndex As Integer,
	rbnControlsColl As This,
	rbnControlItem As This

OnError GoTo ErrorOccured

RBNGroupGetControlThs = FALSE

	nControlIndex	= RBNGroupGetControlIndexThs(rbnGroup, sControlName)
	If nControlIndex > RBN_ELEMENT_NOT_FOUND Then
		rbnControlsColl 		= GetRbnCtrlGrpCtrls(rbnGroup)
		rbnControlItem 		= GetMICtrlCollItemInt(rbnControlsColl, nControlIndex)

		rbnControlFound		= rbnControlItem
		RBNGroupGetControlThs	= TRUE
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnControlsColl	= NULL_PTR
'	rbnControlItem		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupGetControlThs")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupGetControlIndexThs(	  rbnGroup As This
								, ByVal sControlName As String
								) As Integer

Dim	i, nNumControls, nCntrlType As Integer,
	sName, sCaption As String,
	rbnControlsColl As This,
	rbnControlItem As This

OnError GoTo ErrorOccured

RBNGroupGetControlIndexThs = RBN_ELEMENT_NOT_FOUND

	rbnControlsColl = GetRbnCtrlGrpCtrls(rbnGroup)
	nNumControls = GetMICtrlCollCount(rbnControlsColl)
'	Call DEBUGPrint("   RBNGroupGetControlIndexThs: Number of Groups " & nNumControls)
	For i = 0 To (nNumControls - 1)
		rbnControlItem	= GetMICtrlCollItemInt(rbnControlsColl, i)

'		nCntrlType	= GetMICtrlCtrlType(rbnControlItem)
		sName		= GetMICtrlName(rbnControlItem)
'		sCaption		= GetMICtrlCaption(rbnControlItem)
'		Call DEBUGPrint("      Control " & k & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")

		If sName = sControlName Then
			RBNGroupGetControlIndexThs	= i

			'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
			'This is necessary to avoid memory leaks and unnecessary variable references.
			rbnControlsColl		= NULL_PTR
			rbnControlItem			= NULL_PTR

			Exit Function
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnControlsColl	= NULL_PTR
	rbnControlItem		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupGetControlIndexThs")
	Call ERRShow()

End Function


'*******************************************************************************************************
'** WORKING WITH SPLITBUTTONS **************************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Function RBNSplitButtonNumGroups(	  ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sSplitButtonName As String
							) As Integer


Dim	rbnTab As This,
	rbnGroup As This,
	rbnSplitButton As This,
	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr

OnError GoTo ErrorOccured

RBNSplitButtonNumGroups = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			'Get the ribbon group collection.
			rbnGroup		= rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sSplitButtonName, rbnControlFound) Then
				rbnSplitButton = rbnControlFound

				'Get Group controls collection
				rbnGroupsColl 			= GetRbnSplitCtrlCtrls(rbnSplitButton)
				'Add a new group.
				RBNSplitButtonNumGroups	= GetMICtrlCollCount(rbnGroupsColl)
'				RBNSplitButtonNumGroups	= GetRbnCtrlGrpCollCount(rbnGroupsColl)
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTab			= NULL_PTR
	rbnGroup			= NULL_PTR
	rbnSplitButton		= NULL_PTR
	rbnGroupsColl		= NULL_PTR
	rbnTabFound		= NULL_PTR
	rbnGroupFound		= NULL_PTR
	rbnControlFound	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonNumGroups")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonAddGroup(	  ByVal sSplitButtonGroupName As String
							, ByVal sCaption As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sSplitButtonName As String
							) As Integer					'Returns the modular Idx of the group or 0, if it wasn't created


Dim	rbnTab As This,
	rbnGroup As This,
	rbnSplitButton As This,
	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr,
	nCtrl As Integer

OnError GoTo ErrorOccured

RBNSplitButtonAddGroup = 0

	Call RBNInitiate

'	Call DEBUGPrint("RBNSplitButtonAddGroup")
	If RBNGetTab(sTabName, rbnTabFound) Then
'		Call DEBUGPrint("   Tab found: " & sTabName)
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
'			Call DEBUGPrint("   Group found: " & sGroupName)
			'Get the ribbon group collection.
			rbnGroup		= rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sSplitButtonName, rbnControlFound) Then
'				Call DEBUGPrint("   Splitbutton found: " & sSplitButtonName)
				rbnSplitButton = rbnControlFound

				nCtrl = RBNAddElement(sTabName, sGroupName, sSplitButtonName, sSplitButtonGroupName, "", ControlType_DropDownMenuGroup)
'				Call DEBUGPrint("   Adding as element: " & nCtrl)

'				Call DEBUGPrint("   Getting the Group Collection")
				'Get Group controls collection
				rbnGroupsColl = GetRbnSplitCtrlCtrls(rbnSplitButton)

				'Add a new group.
'				Call DEBUGPrint("   Adding the new Group " & sSplitButtonGroupName)
				marrControls(nCtrl)		= MICtrlCollAddStrStrInt(rbnGroupsColl, sSplitButtonGroupName, sCaption, ControlType_DropDownMenuGroup)

'				Call DEBUGPrint( "GetRbnDropDownCtrlHorzAlign: " & GetRbnDropDownCtrlHorzAlign(marrControls(nCtrl)))
'				Call DEBUGPrint( "GetRbnDropDownCtrlVertAlign: " & GetRbnDropDownCtrlVertAlign(marrControls(nCtrl)))
				Call SetRbnDropDownCtrlHorzAlign(marrControls(nCtrl), Horiz_Align_Stretch)
				Call SetRbnDropDownCtrlVertAlign(marrControls(nCtrl), Vert_Align_Stretch)
				RBNSplitButtonAddGroup = nCtrl
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTab 			= NULL_PTR
	rbnGroup 			= NULL_PTR
	rbnSplitButton 	= NULL_PTR
	rbnGroupsColl 		= NULL_PTR
	rbnTabFound 		= NULL_PTR
	rbnGroupFound 		= NULL_PTR
	rbnControlFound 	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonAddGroup: " & sSplitButtonGroupName & " on SplitButton " & sSplitButtonName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonGroupRemove(  ByVal sSplitButtonGroupName As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sSplitButtonName As String
							) As Integer

Dim	rbnGroup As This,
	rbnGroupsColl as This,
	rbnSplitButton As This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr,
	rbnControlGroupFound As RefPtr,
	rbnTab As This,
	nCtrl, nGroupItem As Integer

OnError GoTo ErrorOccured

RBNSplitButtonGroupRemove = 0

	Call RBNInitiate

'	Call DEBUGPrint("RBNSplitButtonGroupRemove from " & sTabName)
	If RBNGetTab(sTabName, rbnTabFound) Then
'		Call DEBUGPrint("   Tab found: " & sTabName & " searching for Group " & sGroupName)
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
'			Call DEBUGPrint("   Group found: " & sGroupName & " searching for SplitButton " & sSplitButtonName)
			'Get the ribbon group collection.
			rbnGroup		= rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sSplitButtonName, rbnControlFound) Then
'				Call DEBUGPrint("   Splitbutton found: " & sSplitButtonName & " searching for Group " & sSplitButtonGroupName)
				rbnSplitButton = rbnControlFound

				nGroupItem = RBNSplitButtonGetGroupIndexThs(rbnSplitButton, sSplitButtonGroupName)
				If nGroupItem > RBN_ELEMENT_NOT_FOUND Then
'					Call DEBUGPrint("   Group found: " & sSplitButtonGroupName)
					'Get Group controls collection
					rbnGroupsColl = GetRbnSplitCtrlCtrls(rbnSplitButton)

					Call MICtrlCollRemoveAt(rbnGroupsColl, nGroupItem)
					nCtrl = RBNRemoveElement(sTabName, sGroupName, sSplitButtonName, sSplitButtonGroupName, "")
					RBNSplitButtonGroupRemove = nCtrl
				Else
'					Call DEBUGPrint("RBNSplitButtonGroupRemove: Control not found: " & sSplitButtonGroupName)
				End If
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTab				= NULL_PTR
	rbnGroup				= NULL_PTR
	rbnGroupsColl			= NULL_PTR
	rbnSplitButton			= NULL_PTR
	rbnTabFound			= NULL_PTR
	rbnGroupFound			= NULL_PTR
	rbnControlFound		= NULL_PTR
	rbnControlGroupFound	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonGroupRemove: " & sSplitButtonGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonGetGroupThs(  rbnSplitButton As This
							, ByVal sGroupName As String
							, rbnGroupFound As RefPtr
							) As Logical

Dim	nGroupIndex As Integer,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNSplitButtonGetGroupThs = FALSE

	nGroupIndex	= RBNSplitButtonGetGroupIndexThs(rbnSplitButton, sGroupName)
	If nGroupIndex > RBN_ELEMENT_NOT_FOUND Then
		rbnGroupsColl			= GetRbnSplitCtrlCtrls(rbnSplitButton)

		rbnGroupItem 				= GetMICtrlCollItemInt(rbnGroupsColl, nGroupIndex)
		rbnGroupFound				= rbnGroupItem

		RBNSplitButtonGetGroupThs	= TRUE
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnGroupsColl 	= NULL_PTR
'	rbnGroupItem 	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonGetGroupThs")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonGetGroupIndexThs(  rbnSplitButton As This
								, ByVal sGroupName As String
								) As Integer

Dim	i, nNumGroups, nCtrlType As Integer,
	sName, sCaption As String,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNSplitButtonGetGroupIndexThs = RBN_ELEMENT_NOT_FOUND

	rbnGroupsColl = GetRbnSplitCtrlCtrls(rbnSplitButton)
	nNumGroups = GetMICtrlCollCount(rbnGroupsColl)
'	Call DEBUGPrint("   RBNSplitButtonGetGroupIndexThs: Number of SplitButton Groups " & nNumGroups)
	For i = 0 To (nNumGroups - 1)
		rbnGroupItem = GetMICtrlCollItemInt(rbnGroupsColl, i)

		nCtrlType	= GetMICtrlCtrlType(rbnGroupItem)
		sName	= GetMICtrlName(rbnGroupItem)
'		sCaption	= GetMICtrlCaption(rbnGroupItem)
'		Call DEBUGPrint("   SplitButton Group " & i & " is named " & sName & " but shown as " & sCaption)

		If sName = sGroupName AND nCtrlType = ControlType_DropDownMenuGroup Then
			RBNSplitButtonGetGroupIndexThs	= i

			'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
			'This is necessary to avoid memory leaks and unnecessary variable references.
			rbnGroupsColl				= NULL_PTR
			rbnGroupItem				= NULL_PTR

			Exit Function
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnGroupsColl	= NULL_PTR
	rbnGroupItem	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonGetGroupIndexThs: GroupName: " & sGroupName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonGroupExistsThs(	  rbnSplitButton As This
								, ByVal sGroupName As String
								) As Logical

OnError GoTo ErrorOccured

	RBNSplitButtonGroupExistsThs = (RBNSplitButtonGetGroupIndexThs(rbnSplitButton, sGroupName) > RBN_ELEMENT_NOT_FOUND)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonGroupExistsThs")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH CONTROLS ON SPLITBUTTONS ***************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonGroupAddControl(	  ByVal sControlName As String
								, ByVal sCaption As String
								, ByVal sKeytip As String
								, ByVal nControlType As Integer
								, ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal sSplitButtonName As string
								, ByVal sSplitButtonGroupName As string
								) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created
Dim	rbnTab As This,
	rbnGroup As This,
	rbnSplitButton As This,
	rbnSplitButtonGroup As This,
	rbnControlsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr,
	rbnControlGroupFound As RefPtr,
	nCtrl As Integer

OnError GoTo ErrorOccured

RBNSplitButtonGroupAddControl = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			rbnGroup = rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sSplitButtonName, rbnControlFound) Then
				rbnSplitButton = rbnControlFound

				If RBNSplitButtonGetGroupThs(rbnSplitButton, sSplitButtonGroupName, rbnControlGroupFound) Then
					rbnSplitButtonGroup	= rbnControlGroupFound

					'Get Group controls collection
					rbnControlsColl = GetCtrlGrpCtrls(rbnSplitButtonGroup)

					nCtrl 			= RBNAddElement(GetRbnTabName(rbnTab), GetRbnCtrlGrpName(rbnGroup), sSplitButtonName, sSplitButtonGroupName, sControlName, nControlType)
					marrControls(nCtrl) = MICtrlCollAddStrStrInt(rbnControlsColl, sControlName, sCaption, nControlType)

					If sKeytip <> "" Then
						'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
						'A KeyTip must have from 1 to 3 uppercase characters.
						Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
					End If
				End If

				RBNSplitButtonGroupAddControl = nCtrl
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTab 				= NULL_PTR
	rbnGroup 				= NULL_PTR
	rbnSplitButton 		= NULL_PTR
	rbnSplitButtonGroup 	= NULL_PTR
	rbnControlsColl 		= NULL_PTR
	rbnTabFound 			= NULL_PTR
	rbnGroupFound 			= NULL_PTR
	rbnControlFound 		= NULL_PTR
	rbnControlGroupFound 	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonGroupAddControl: " & sControlName & " to " & sSplitButtonGroupName & " on " & sSplitButtonName & " - tab | group: " & sTabName & "|" & sGroupName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonGroupRemoveControl(	  ByVal sControlName As String
									, ByVal sTabName As String
									, ByVal sGroupName As String
									, ByVal sSplitButtonName As string
									, ByVal sSplitButtonGroupName As string
									) As Integer

Dim	rbnTab As This,
	rbnGroup As This,
	rbnSplitButton As This,
	rbnSplitButtonGroup As This,
	rbnControlsColl as This,
	rbnControlItem As This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr,
	rbnControlGroupFound As RefPtr,
	nItem, nCtrl, nNumCntrls As Integer

OnError GoTo ErrorOccured

RBNSplitButtonGroupRemoveControl = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			rbnGroup = rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sSplitButtonName, rbnControlFound) Then
				rbnSplitButton = rbnControlFound

				If RBNSplitButtonGetGroupThs(rbnSplitButton, sSplitButtonGroupName, rbnControlGroupFound) Then
					rbnSplitButtonGroup	= rbnControlGroupFound

					'Get Group controls collection
					rbnControlsColl	= GetCtrlGrpCtrls(rbnSplitButtonGroup)
					nNumCntrls 		= GetMICtrlCollCount(rbnControlsColl)

					For nItem = (nNumCntrls - 1) To 0 Step -1
						rbnControlItem	= GetMICtrlCollItemInt(rbnControlsColl, nItem)
						If sControlName = GetMICtrlName(rbnControlItem) Then
							Call MICtrlCollRemoveAt(rbnControlsColl, nItem)
							nCtrl 						= RBNRemoveElement(sTabName, sGroupName, sSplitButtonName, sSplitButtonGroupName, sControlName)
							RBNSplitButtonGroupRemoveControl	= nCtrl
						End If
					Next
				End If
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTab				= NULL_PTR
	rbnGroup				= NULL_PTR
	rbnSplitButton			= NULL_PTR
	rbnSplitButtonGroup		= NULL_PTR
	rbnControlsColl		= NULL_PTR
	rbnControlItem			= NULL_PTR
	rbnTabFound			= NULL_PTR
	rbnGroupFound			= NULL_PTR
	rbnControlFound		= NULL_PTR
	rbnControlGroupFound	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonGroupRemoveControl: " & sControlName & " from " & sSplitButtonGroupName & " on " & sSplitButtonName & " - tab | group: " & sTabName & "|" & sGroupName)
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH DROPDOWNBUTTONS **************************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Function RBNDropDButtonNumGroups(	  ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sDropDButtonName As String
							) As Integer


Dim	rbnTab As This,
	rbnGroup As This,
	rbnDropDButton As This,
	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr

OnError GoTo ErrorOccured

RBNDropDButtonNumGroups = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			'Get the ribbon group collection.
			rbnGroup		= rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sDropDButtonName, rbnControlFound) Then
				rbnDropDButton = rbnControlFound

				'Get Group controls collection
				rbnGroupsColl 			= GetRbnDropDownCtrlCtrls(rbnDropDButton)
				'Get the number of groups
				RBNDropDButtonNumGroups	= GetMICtrlCollCount(rbnGroupsColl)
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTab			= NULL_PTR
	rbnGroup			= NULL_PTR
	rbnDropDButton		= NULL_PTR
	rbnGroupsColl		= NULL_PTR
	rbnTabFound		= NULL_PTR
	rbnGroupFound		= NULL_PTR
	rbnControlFound	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonNumGroups")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonAddGroup(	  ByVal sDropDButtonGroupName As String
							, ByVal sCaption As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sDropDButtonName As String
							) As Integer					'Returns the modular Idx of the group or 0, if it wasn't created


Dim	rbnTab As This,
	rbnGroup As This,
	rbnDropDButton As This,
	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr,
	nCtrl As Integer

OnError GoTo ErrorOccured

RBNDropDButtonAddGroup = 0

	Call RBNInitiate

'	Call DEBUGPrint("RBNDropDButtonAddGroup")
	If RBNGetTab(sTabName, rbnTabFound) Then
'		Call DEBUGPrint("   Tab found: " & sTabName)
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
'			Call DEBUGPrint("   Group found: " & sGroupName)
			'Get the ribbon group collection.
			rbnGroup		= rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sDropDButtonName, rbnControlFound) Then
'				Call DEBUGPrint("   DropDownButton found: " & sDropDButtonName)
				rbnDropDButton = rbnControlFound

				nCtrl = RBNAddElement(sTabName, sGroupName, sDropDButtonName, sDropDButtonGroupName, "", ControlType_DropDownMenuGroup)
'				Call DEBUGPrint("   Adding as element: " & nCtrl)

'				Call DEBUGPrint("   Getting the Group Collection")
				'Get Group controls collection
				rbnGroupsColl = GetRbnDropDownCtrlCtrls(rbnDropDButton)

				'Add a new group.
'				Call DEBUGPrint("   Adding the new Group " & sDropDButtonGroupName)
				marrControls(nCtrl)		= MICtrlCollAddStrStrInt(rbnGroupsColl, sDropDButtonGroupName, sCaption, ControlType_DropDownMenuGroup)

'				Call DEBUGPrint( "GetRbnDropDownCtrlHorzAlign: " & GetRbnDropDownCtrlHorzAlign(marrControls(nCtrl)))
'				Call DEBUGPrint( "GetRbnDropDownCtrlVertAlign: " & GetRbnDropDownCtrlVertAlign(marrControls(nCtrl)))
				Call SetRbnDropDownCtrlHorzAlign(marrControls(nCtrl), Horiz_Align_Stretch)
				Call SetRbnDropDownCtrlVertAlign(marrControls(nCtrl), Vert_Align_Stretch)
				RBNDropDButtonAddGroup = nCtrl
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTab 			= NULL_PTR
	rbnGroup 			= NULL_PTR
	rbnDropDButton 	= NULL_PTR
	rbnGroupsColl 		= NULL_PTR
	rbnTabFound 		= NULL_PTR
	rbnGroupFound 		= NULL_PTR
	rbnControlFound 	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonAddGroup: " & sDropDButtonGroupName & " on DropDownButton " & sDropDButtonName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonGroupRemove(  ByVal sDropDButtonGroupName As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sDropDButtonName As String
							) As Integer

Dim	rbnGroup As This,
	rbnGroupsColl as This,
	rbnDropDButton As This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr,
	rbnControlGroupFound As RefPtr,
	rbnTab As This,
	nCtrl, nGroupItem As Integer

OnError GoTo ErrorOccured

RBNDropDButtonGroupRemove = 0

	Call RBNInitiate

'	Call DEBUGPrint("RBNDropDButtonGroupRemove from " & sTabName)
	If RBNGetTab(sTabName, rbnTabFound) Then
'		Call DEBUGPrint("   Tab found: " & sTabName & " searching for Group " & sGroupName)
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
'			Call DEBUGPrint("   Group found: " & sGroupName & " searching for DropDButton " & sDropDButtonName)
			'Get the ribbon group collection.
			rbnGroup		= rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sDropDButtonName, rbnControlFound) Then
'				Call DEBUGPrint("   DropDownButton found: " & sDropDButtonName & " searching for Group " & sDropDButtonGroupName)
				rbnDropDButton = rbnControlFound

				nGroupItem = RBNDropDButtonGetGroupIndexThs(rbnDropDButton, sDropDButtonGroupName)
				If nGroupItem > RBN_ELEMENT_NOT_FOUND Then
'					Call DEBUGPrint("   Group found: " & sDropDButtonGroupName)
					'Get Group controls collection
					rbnGroupsColl = GetRbnDropDownCtrlCtrls(rbnDropDButton)

					Call MICtrlCollRemoveAt(rbnGroupsColl, nGroupItem)
					nCtrl = RBNRemoveElement(sTabName, sGroupName, sDropDButtonName, sDropDButtonGroupName, "")
					RBNDropDButtonGroupRemove = nCtrl
				Else
					Call DEBUGPrint("RBNDropDButtonGroupRemove: Control not found: " & sDropDButtonGroupName)
				End If
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTab				= NULL_PTR
	rbnGroup				= NULL_PTR
	rbnGroupsColl			= NULL_PTR
	rbnDropDButton			= NULL_PTR
	rbnTabFound			= NULL_PTR
	rbnGroupFound			= NULL_PTR
	rbnControlFound		= NULL_PTR
	rbnControlGroupFound	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonGroupRemove: " & sDropDButtonGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonGetGroupThs(  rbnDropDButton As This
							, ByVal sGroupName As String
							, rbnGroupFound As RefPtr
							) As Logical

Dim	nGroupIndex As Integer,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNDropDButtonGetGroupThs = FALSE

	nGroupIndex	= RBNDropDButtonGetGroupIndexThs(rbnDropDButton, sGroupName)
	If nGroupIndex > RBN_ELEMENT_NOT_FOUND Then
		rbnGroupsColl			= GetRbnDropDownCtrlCtrls(rbnDropDButton)

		rbnGroupItem 				= GetMICtrlCollItemInt(rbnGroupsColl, nGroupIndex)
		rbnGroupFound				= rbnGroupItem

		RBNDropDButtonGetGroupThs	= TRUE
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnGroupsColl 	= NULL_PTR
'	rbnGroupItem 	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonGetGroupThs")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonGetGroupIndexThs(  rbnDropDButton As This
								, ByVal sGroupName As String
								) As Integer

Dim	i, nNumGroups, nCtrlType As Integer,
	sName, sCaption As String,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNDropDButtonGetGroupIndexThs = RBN_ELEMENT_NOT_FOUND

	rbnGroupsColl = GetRbnDropDownCtrlCtrls(rbnDropDButton)
	nNumGroups = GetMICtrlCollCount(rbnGroupsColl)
'	Call DEBUGPrint("   RBNDropDButtonGetGroupIndexThs: Number of DropDownButton Groups " & nNumGroups)
	For i = 0 To (nNumGroups - 1)
		rbnGroupItem = GetMICtrlCollItemInt(rbnGroupsColl, i)

		nCtrlType	= GetMICtrlCtrlType(rbnGroupItem)
		sName	= GetMICtrlName(rbnGroupItem)
'		sCaption	= GetMICtrlCaption(rbnGroupItem)
'		Call DEBUGPrint("   DropDownButton Group " & i & " is named " & sName & " but shown as " & sCaption)

		If sName = sGroupName AND nCtrlType = ControlType_DropDownMenuGroup Then
			RBNDropDButtonGetGroupIndexThs	= i

			'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
			'This is necessary to avoid memory leaks and unnecessary variable references.
			rbnGroupsColl				= NULL_PTR
			rbnGroupItem				= NULL_PTR

			Exit Function
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnGroupsColl	= NULL_PTR
	rbnGroupItem	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonGetGroupIndexThs: GroupName: " & sGroupName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonGroupExistsThs(	  rbnDropDButton As This
								, ByVal sGroupName As String
								) As Logical

OnError GoTo ErrorOccured

	RBNDropDButtonGroupExistsThs = (RBNDropDButtonGetGroupIndexThs(rbnDropDButton, sGroupName) > RBN_ELEMENT_NOT_FOUND)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonGroupExistsThs")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH CONTROLS ON DROPDOWNBUTTONS ***************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonGroupAddControl(	  ByVal sControlName As String
								, ByVal sCaption As String
								, ByVal sKeytip As String
								, ByVal nControlType As Integer
								, ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal sDropDButtonName As string
								, ByVal sDropDButtonGroupName As string
								) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created
Dim	rbnTab As This,
	rbnGroup As This,
	rbnDropDButton As This,
	rbnDropDButtonGroup As This,
	rbnControlsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr,
	rbnControlGroupFound As RefPtr,
	nCtrl As Integer

OnError GoTo ErrorOccured

RBNDropDButtonGroupAddControl = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			rbnGroup = rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sDropDButtonName, rbnControlFound) Then
				rbnDropDButton = rbnControlFound

				If RBNDropDButtonGetGroupThs(rbnDropDButton, sDropDButtonGroupName, rbnControlGroupFound) Then
					rbnDropDButtonGroup	= rbnControlGroupFound

					'Get Group controls collection
					rbnControlsColl = GetCtrlGrpCtrls(rbnDropDButtonGroup)

					nCtrl 			= RBNAddElement(GetRbnTabName(rbnTab), GetRbnCtrlGrpName(rbnGroup), sDropDButtonName, sDropDButtonGroupName, sControlName, nControlType)
					marrControls(nCtrl) = MICtrlCollAddStrStrInt(rbnControlsColl, sControlName, sCaption, nControlType)

					If sKeytip <> "" Then
						'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
						'A KeyTip must have from 1 to 3 uppercase characters.
						Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
					End If
				End If

				RBNDropDButtonGroupAddControl = nCtrl
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTab 				= NULL_PTR
	rbnGroup 				= NULL_PTR
	rbnDropDButton 		= NULL_PTR
	rbnDropDButtonGroup 	= NULL_PTR
	rbnControlsColl 		= NULL_PTR
	rbnTabFound 			= NULL_PTR
	rbnGroupFound 			= NULL_PTR
	rbnControlFound 		= NULL_PTR
	rbnControlGroupFound 	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonGroupAddControl: " & sControlName & " to " & sDropDButtonGroupName & " on " & sDropDButtonName & " - tab | group: " & sTabName & "|" & sGroupName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonGroupRemoveControl(	  ByVal sControlName As String
									, ByVal sTabName As String
									, ByVal sGroupName As String
									, ByVal sDropDButtonName As string
									, ByVal sDropDButtonGroupName As string
									) As Integer

Dim	rbnTab As This,
	rbnGroup As This,
	rbnDropDButton As This,
	rbnDropDButtonGroup As This,
	rbnControlsColl as This,
	rbnControlItem As This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr,
	rbnControlGroupFound As RefPtr,
	nItem, nCtrl, nNumCntrls As Integer

OnError GoTo ErrorOccured

RBNDropDButtonGroupRemoveControl = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			rbnGroup = rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sDropDButtonName, rbnControlFound) Then
				rbnDropDButton = rbnControlFound

				If RBNDropDButtonGetGroupThs(rbnDropDButton, sDropDButtonGroupName, rbnControlGroupFound) Then
					rbnDropDButtonGroup	= rbnControlGroupFound

					'Get Group controls collection
					rbnControlsColl	= GetCtrlGrpCtrls(rbnDropDButtonGroup)
					nNumCntrls 		= GetMICtrlCollCount(rbnControlsColl)

					For nItem = 0 To (nNumCntrls - 1)
						rbnControlItem	= GetMICtrlCollItemInt(rbnControlsColl, nItem)
						If sControlName = GetMICtrlName(rbnControlItem) Then
							Call MICtrlCollRemoveAt(rbnControlsColl, nItem)
							nCtrl 						= RBNRemoveElement(sTabName, sGroupName, sDropDButtonName, sDropDButtonGroupName, sControlName)
							RBNDropDButtonGroupRemoveControl	= nCtrl
						End If
					Next
				End If
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTab				= NULL_PTR
	rbnGroup				= NULL_PTR
	rbnDropDButton			= NULL_PTR
	rbnDropDButtonGroup		= NULL_PTR
	rbnControlsColl		= NULL_PTR
	rbnControlItem			= NULL_PTR
	rbnTabFound			= NULL_PTR
	rbnGroupFound			= NULL_PTR
	rbnControlFound		= NULL_PTR
	rbnControlGroupFound	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonGroupRemoveControl: " & sControlName & " from " & sDropDButtonGroupName & " on " & sDropDButtonName & " - tab | group: " & sTabName & "|" & sGroupName)
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH GALLERY ************************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGalleryGetGroupThs(	  rbnGallery As This
							, ByVal sGroupName As String
							, rbnGroupFound As RefPtr
							) As Logical

Dim	i, nGroupIndex As Integer,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNGalleryGetGroupThs = FALSE

	nGroupIndex	= RBNGalleryGetGroupIndexThs(rbnGallery, sGroupName)
	If nGroupIndex > RBN_ELEMENT_NOT_FOUND Then
		rbnGroupsColl	= GetRbnGalleryCtrlGrps(rbnGallery)

		rbnGroupItem 			= GetMIGalleryGrpCollItemInt(rbnGroupsColl, nGroupIndex)
		rbnGroupFound			= rbnGroupItem

		RBNGalleryGetGroupThs	= TRUE
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnGroupsColl 	= NULL_PTR
'	rbnGroupItem 	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGalleryGetGroupThs")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGalleryGetGroupIndexThs( rbnGallery As This
							, ByVal sGroupName As String
							) As Integer

Dim	i, nNumGroups As Integer,
	sName, sCaption As String,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNGalleryGetGroupIndexThs = RBN_ELEMENT_NOT_FOUND

	rbnGroupsColl = GetRbnGalleryCtrlGrps(rbnTab)
	nNumGroups = GetMIGalleryGrpCollCount(rbnGroupsColl)
'	Call DEBUGPrint("   RBNGalleryGetGroupIndexThs: Number of Gallery Groups " & nNumGroups)
	For i = 0 To (nNumGroups - 1)
		rbnGroupItem = GetMIGalleryGrpCollItemInt(rbnGroupsColl, i)

		sName	= GetRbnGalleryGrpName(rbnGroupItem)
'		sCaption	= GetRbnGalleryGrpCaption(rbnGroupItem)
'		Call DEBUGPrint("   Gallery Group " & i & " is named " & sName & " but shown as " & sCaption)

		If sName = sGroupName Then
			RBNGalleryGetGroupIndexThs	= i

			'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
			'This is necessary to avoid memory leaks and unnecessary variable references.
			rbnGroupsColl		= NULL_PTR
			rbnGroupItem		= NULL_PTR

			Exit Function
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnGroupsColl	= NULL_PTR
	rbnGroupItem	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGalleryGetGroupIndexThs")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGalleryGroupExistsThs(	  rbnGallery As This
							, ByVal sGroupName As String
							) As Logical

OnError GoTo ErrorOccured

	RBNGalleryGroupExistsThs = (RBNGalleryGetGroupIndexThs(rbnGallery, sGroupName) > RBN_ELEMENT_NOT_FOUND)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGalleryGroupExistsThs")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH COLLECTIONS *************************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNCollectionGetControlIndexThs( rbnControlsColl As this
								, ByVal sControlName As String
								) As Integer

Dim	i, nNumControls As Integer,
	sName As String,
	rbnControlItem As This

OnError GoTo ErrorOccured

RBNCollectionGetControlIndexThs = RBN_ELEMENT_NOT_FOUND

	Call RBNInitiate

	nNumControls = GetMICtrlCollCount(rbnControlsColl)
'	Call DEBUGPrint("   RBNCollectionGetControlIndexThs: Number of Controls " & nNumControls)
	For i = 0 To (nNumControls - 1)
		rbnControlItem	= GetMICtrlCollItemInt(rbnControlsColl, i)

		sName		= GetMICtrlName(rbnControlItem)

		If sName = sControlName Then
			RBNCollectionGetControlIndexThs	= i

			'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
			'This is necessary to avoid memory leaks and unnecessary variable references.
			rbnControlItem				= NULL_PTR

			Exit Function
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnControlItem		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNCollectionGetControlIndexThs")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH CONTEXTGROUPS *************************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGetContextGroup(	  rbnTab As This
						, ByVal sGroupName As String
						, rbnGroupFound As RefPtr
						) As Logical

Dim	i, nNumGroups As Integer,
	sName, sCaption As String,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNGetContextGroup = FALSE

	rbnGroupsColl	= GetCntxtTabGrpsColl(theRibbon)
	nNumGroups	= GetRbnCntxtTabGrpCollCount(rbnGroupsColl)
'	Call DEBUGPrint("   RBNGetContextGroup: Number of Tab Groups " & nNumGroups)
	For i = 0 To (nNumGroups - 1)
		rbnGroupItem = GetRbnCntxtTabGrpCollItemInt(rbnGroupsColl, i)

		sName	= GetRbnCntxtTabGrpName(rbnTabGrpItem)
'		sCaption	= GetRbnCntxtTabGrpCaption(rbnTabGrpItem)
'		Call DEBUGPrint("   Tab Ctrl Group " & i & " is named " & sName & " but shown as " & sCaption)

		If sName = sGroupName Then
			rbnGroupFound		= rbnGroupItem
			RBNGetContextGroup	= TRUE

			'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
			'This is necessary to avoid memory leaks and unnecessary variable references.
			rbnGroupsColl		= NULL_PTR
'			rbnGroupItem		= NULL_PTR

			Exit Function
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnGroupsColl	= NULL_PTR
	rbnGroupItem	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetContextGroup")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH CONTROLS ON CONTEXTGROUPS *************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNContextGroupAddButton(	  ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal sKeytip As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							) As Integer

Dim	rbnGroup As This,
	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnTab As This,
	nCtrl As Integer

OnError GoTo ErrorOccured

RBNContextGroupAddButton = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNGetContextGroup(rbnTab, sGroupName, rbnGroupFound) Then
			rbnGroup = rbnGroupFound

			'Get Group controls collection
			rbnGroupsColl = GetRbnCtrlGrpCtrls(rbnGroup)

			nCtrl 			= RBNAddElement(GetRbnTabName(rbnTab), GetRbnCtrlGrpName(rbnGroup), "", "", sControlName, ControlType_Button)
			marrControls(nCtrl) = MICtrlCollAddStrStrInt(rbnGroupsColl, sControlName, sCaption, ControlType_Button)

			RBNContextGroupAddButton = nCtrl
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnGroup		= NULL_PTR
	rbnGroupsColl	= NULL_PTR
	rbnTabFound	= NULL_PTR
	rbnGroupFound	= NULL_PTR
	rbnTab		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNContextGroupAddButton")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH MENUITEMS ON TOOLCONTEXTMENU **********************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNToolContextMenuAddMenuItem(	  ByVal sControlName As String
								, ByVal sCaption As String		'If "(-" then a separator is added
								, ByVal sKeytip As String
								) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created

Dim	nCtrl as Integer

OnError GoTo ErrorOccured

RBNToolContextMenuAddMenuItem = 0

	Call RBNInitiate

	If sCaption = "(-" Then
		nCtrl 			= RBNAddElement("ToolContextMenu", "", "", "", sControlName, ControlType_ContextMenuSeparator)
		marrControls(nCtrl) = MICtrlCollAddStrStrInt(theToolContextMenuItemsColl, sControlName, "", ControlType_ContextMenuSeparator)
	Else
		nCtrl 			= RBNAddElement("ToolContextMenu", "", "", "", sControlName, ControlType_ContextMenuItem)
		marrControls(nCtrl) = MICtrlCollAddStrStrInt(theToolContextMenuItemsColl, sControlName, sCaption, ControlType_ContextMenuItem)
	End If

	RBNToolContextMenuAddMenuItem = nCtrl
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNToolContextMenuAddMenuItem")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNToolContextMenuRemoveMenuItem(	  ByVal sControlName As String
									) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created

Dim	nControlItem, nCtrl as Integer

OnError GoTo ErrorOccured

RBNToolContextMenuRemoveMenuItem = 0

	Call RBNInitiate

	nControlItem = RBNCollectionGetControlIndexThs(theToolContextMenuItemsColl, sControlName)
	If nControlItem > RBN_ELEMENT_NOT_FOUND Then
		Call MICtrlCollRemoveAt(theToolContextMenuItemsColl, nControlItem)
		nCtrl 					= RBNRemoveElement("ToolContextMenu", "", "", "", sControlName)
		RBNToolContextMenuRemoveMenuItem	= nCtrl
	Else
		Call DEBUGPrint("RBNToolContextMenuRemoveMenuItem: Menu Item not found: " & sControlName)
	End If

	RBNToolContextMenuRemoveMenuItem = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNToolContextMenuRemoveMenuItem")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH STACKPANELS ON MINI MAP TOOLBAR **********************************************
'*******************************************************************************************************
'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBNumStackPanels() As Integer

Dim	i, nNumCntrls, nNumStackPanels, nCntrlType As Integer,
	sName, sCaption As String,
	rbnControlItem As This

OnError GoTo ErrorOccured

	Call RBNInitiate

	nNumCntrls = GetMICtrlCollCount(theMapMTBControlsColl)
'	Call DEBUGPrint("   Map MiniToolBar: Number of Controls " & nNumCntrls)
	For i = 0 To (nNumCntrls - 1)
		rbnControlItem	= GetMICtrlCollItemInt(theMapMTBControlsColl, i)

'		sName		= GetMICtrlName(rbnControlItem)
		nCntrlType	= GetMICtrlCtrlType(rbnControlItem)
'		sCaption		= GetMICtrlCaption(rbnControlItem)
'		Call DEBUGPrint("      MiniToolBar Control " & i & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")

		If nCntrlType = ControlType_StackPanel Then
			nNumStackPanels = nNumStackPanels + 1
		End If
	Next

	RBNMapMTBNumStackPanels = nNumStackPanels
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBNumStackPanels")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBAddStackPanel(	  ByVal sStackPanelName As String
							, ByVal sCaption As String
							) As Integer					'Returns the modular Idx of the StackPanel or 0, if it wasn't created

OnError GoTo ErrorOccured

	Call RBNInitiate

	RBNMapMTBAddStackPanel = RBNMapMTBAddControl(sStackPanelName, sCaption, "", ControlType_StackPanel)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBAddStackPanel")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBInsertStackPanelAfter(  ByVal sStackPanelName As String
								, ByVal sCaption As String
								, ByVal sNameAfter As String
								) As Logical

OnError GoTo ErrorOccured

	Call RBNInitiate

	RBNMapMTBInsertStackPanelAfter = RBNMapMTBInsertControlAfter(sStackPanelName, sCaption, "", ControlType_StackPanel, sNameAfter)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBInsertStackPanelAfter")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBInsertStackPanelBefore( ByVal sStackPanelName As String
								, ByVal sCaption As String
								, ByVal sNameBefore As String
								) As Logical

OnError GoTo ErrorOccured

	Call RBNInitiate

	RBNMapMTBInsertStackPanelBefore = RBNMapMTBInsertControlBefore(sStackPanelName, sCaption, "", ControlType_StackPanel, sNameBefore)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBInsertStackPanelBefore")
	Call ERRShow()

End Function


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBStackPanelRemove(	  ByVal sStackPanelName As String
								) As Integer

OnError GoTo ErrorOccured

	Call RBNInitiate

	RBNMapMTBStackPanelRemove = RBNMapMTBRemoveControl(sStackPanelName)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBStackPanelRemove")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBGetStackPanel(	 ByVal sStackPanelName As String
							, rbnsStackPanelFound As RefPtr
							) As Logical

Dim	nIndex As Integer

OnError GoTo ErrorOccured

RBNMapMTBGetStackPanel = FALSE

	Call RBNInitiate

	nIndex	= RBNMapMTBGetStackPanelIndex(sStackPanelName)
	If nIndex > RBN_ELEMENT_NOT_FOUND Then
		rbnsStackPanelFound	= GetMICtrlCollItemInt(theMapMTBControlsColl, nIndex)
		RBNMapMTBGetStackPanel = TRUE
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBGetStackPanel")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBGetStackPanelIndex(	  ByVal sStackPanelName As String
								) As Integer

Dim	i, nNumCntrls, nCntrlType As Integer,
	sName, sCaption As String,
	rbnControlItem As This

OnError GoTo ErrorOccured

RBNMapMTBGetStackPanelIndex	= RBN_ELEMENT_NOT_FOUND

	Call RBNInitiate

	nNumCntrls = GetMICtrlCollCount(theMapMTBControlsColl)
'	Call DEBUGPrint("   Map MiniToolBar: Number of Controls " & nNumCntrls)
	For i = 0 To (nNumCntrls - 1)
		rbnControlItem	= GetMICtrlCollItemInt(theMapMTBControlsColl, i)

		sName		= GetMICtrlName(rbnControlItem)
		nCntrlType	= GetMICtrlCtrlType(rbnControlItem)
'		sCaption		= GetMICtrlCaption(rbnControlItem)
'		Call DEBUGPrint("      MiniToolBar Control " & i & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")

		If nCntrlType = ControlType_StackPanel Then
			If sStackPanelName = sName Then
				RBNMapMTBGetStackPanelIndex = i
			End If
		End If
	Next

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBGetStackPanelIndex")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBStackPanelExists(	  ByVal sStackPanelName As String
								) As Logical

OnError GoTo ErrorOccured

	Call RBNInitiate

	RBNMapMTBStackPanelExists = (RBNMapMTBGetStackPanelIndex(sStackPanelName) > RBN_ELEMENT_NOT_FOUND)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBStackPanelExists")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH CONTROLS AND BUTTONS ON MINI MAP TOOLBAR **********************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBAddControl(	  ByVal sControlName As String
						, ByVal sCaption As String
						, ByVal sKeytip As String
						, ByVal nControlType As Integer
						) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created

Dim	nCtrl as Integer

OnError GoTo ErrorOccured

RBNMapMTBAddControl = 0

	Call RBNInitiate

	nCtrl 			= RBNAddElement("MapMiniToolbar", "", "", "", sControlName, nControlType)
	marrControls(nCtrl) = MICtrlCollAddStrStrInt(theMapMTBControlsColl, sControlName, sCaption, nControlType)

	If sKeytip <> "" Then
		'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
		'A KeyTip must have from 1 to 3 uppercase characters.
		Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
	End If

	RBNMapMTBAddControl = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBAddControl")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBInsertControl(	  ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal sKeytip As String
							, ByVal nControlType As Integer
							, ByVal nPosition As Integer
							) As Integer

Dim	nCtrl As Integer

OnError GoTo ErrorOccured

RBNMapMTBInsertControl = 0

	Call RBNInitiate

	nCtrl 			= RBNAddElement("MapMiniToolbar", "", "", "", sControlName, nControlType)
	marrControls(nCtrl) = MICtrlCollInsertIntStrStrInt(theMapMTBControlsColl, nPosition, sControlName, sCaption, nControlType)

	If sKeytip <> "" Then
		'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
		'A KeyTip must have from 1 to 3 uppercase characters.
		Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
	End If

	RBNMapMTBInsertControl = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBInsertControl: " & sControlName & " at position " & nPosition)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBInsertControlAfter(	  ByVal sControlName As String
								, ByVal sCaption As String
								, ByVal sKeytip As String
								, ByVal nControlType As Integer
								, ByVal sNameAfter As String
								) As Integer

Dim	nPosition As Integer

OnError GoTo ErrorOccured

RBNMapMTBInsertControlAfter = 0

	nPosition = RBNMapMTBGetControlIndex(sNameAfter)
	If nPosition = 0 Then
		RBNMapMTBInsertControlAfter 	= RBNMapMTBAddControl(sControlName, sCaption, sKeytip, nControlType)
	Else
		nPosition					= nPosition + 1
		RBNMapMTBInsertControlAfter 	= RBNMapMTBInsertControl(sControlName, sCaption, sKeytip, nControlType, nPosition)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBInsertControlAfter: " & sControlName & " after " & sNameAfter)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBInsertControlBefore(	  ByVal sControlName As String
								, ByVal sCaption As String
								, ByVal sKeytip As String
								, ByVal nControlType As Integer
								, ByVal sNameBefore As String
								) As Integer

Dim	nPosition As Integer

OnError GoTo ErrorOccured

RBNMapMTBInsertControlBefore = 0

	nPosition = RBNMapMTBGetControlIndex(sNameBefore)
	If nPosition = 0 Then
		RBNMapMTBInsertControlBefore 	= RBNMapMTBAddControl(sControlName, sCaption, sKeytip, nControlType)
	Else
		RBNMapMTBInsertControlBefore 	= RBNMapMTBInsertControl(sControlName, sCaption, sKeytip, nControlType, nPosition)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBInsertControlBefore: " & sControlName & " before " & sNameBefore)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBRemoveControl(  ByVal sControlName As String
							) As Integer

Dim	nControlItem, nCtrl as Integer

OnError GoTo ErrorOccured

RBNMapMTBRemoveControl = 0

	Call RBNInitiate

	nControlItem = RBNMapMTBGetControlIndex(sControlName)
	If nControlItem > RBN_ELEMENT_NOT_FOUND Then
		Call MICtrlCollRemoveAt(theMapMTBControlsColl, nControlItem)
		nCtrl 				= RBNRemoveElement("MapMiniToolbar", "", "", "", sControlName)
		RBNMapMTBRemoveControl	= nCtrl
	Else
		Call DEBUGPrint("RBNMapMTBRemoveControl: Menu Item not found: " & sControlName)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBRemoveControl")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBAddButton(	  ByVal sControlName As String
						, ByVal sCaption As String
						, ByVal sKeytip As String
						) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created

OnError GoTo ErrorOccured

	RBNMapMTBAddButton = RBNMapMTBAddControl(sControlName, sCaption, sKeytip, ControlType_Button)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBAddButton")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBGetControlIndex(	  ByVal sControlName As String
							) As Integer

OnError GoTo ErrorOccured

RBNMapMTBGetControlIndex = 0

	Call RBNInitiate

	RBNMapMTBGetControlIndex = RBNCollectionGetControlIndexThs(theMapMTBControlsColl, sControlName)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBGetControlIndex")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH CONTROLS ON STACKPANEL ON MINI MAP TOOLBAR ********************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBStackPanelAddControl(	  ByVal sControlName As String
								, ByVal sCaption As String
								, ByVal sKeytip As String
								, ByVal nControlType As Integer
								, ByVal sStackPanelName As string
								) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created

Dim	nCtrl As Integer,
	rbnsStackPanelFound As RefPtr,
	rbnsStackPanel As This,
	stackPanelColl As This

OnError GoTo ErrorOccured

	If RBNMapMTBGetStackPanel(sStackPanelName, rbnsStackPanelFound) > RBN_ELEMENT_NOT_FOUND Then
		rbnsStackPanel	= rbnsStackPanelFound

		stackPanelColl	= GetIStackPanelCtrls(rbnsStackPanel)

		nCtrl 			= RBNAddElement("MapMiniToolbar", sStackPanelName, "", "", sControlName, nControlType)
		marrControls(nCtrl) = MICtrlCollAddStrStrInt(stackPanelColl, sControlName, sCaption, nControlType)

		If sKeytip <> "" Then
			'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
			'A KeyTip must have from 1 to 3 uppercase characters.
			Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
		End If
	End If

	rbnsStackPanelFound	= NULL_PTR
	rbnsStackPanel		= NULL_PTR
	stackPanelColl		= NULL_PTR

	RBNMapMTBStackPanelAddControl = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBStackPanelAddControl")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBStackPanelRemoveControl(	  ByVal sControlName As String
									, ByVal sStackPanelName As string
									) As Integer

Dim	nCtrl, nControlItem As Integer,
	rbnsStackPanelFound As RefPtr,
	rbnsStackPanel As This,
	stackPanelColl As This

OnError GoTo ErrorOccured

RBNMapMTBStackPanelRemoveControl = 0

	If RBNMapMTBGetStackPanel(sStackPanelName, rbnsStackPanelFound) > RBN_ELEMENT_NOT_FOUND Then
		rbnsStackPanel	= rbnsStackPanelFound

		stackPanelColl	= GetIStackPanelCtrls(rbnsStackPanel)

		nControlItem = RBNCollectionGetControlIndexThs(stackPanelColl, sControlName)
		If nControlItem > RBN_ELEMENT_NOT_FOUND Then
			Call MICtrlCollRemoveAt(stackPanelColl, nControlItem)
			nCtrl 				= RBNRemoveElement("MapMiniToolbar", "", "", "", sControlName)
			RBNMapMTBStackPanelRemoveControl	= nCtrl
		Else
			Call DEBUGPrint("RBNMapMTBStackPanelRemoveControl: Item not found: " & sControlName)
		End If
	Else
		Call DEBUGPrint("RBNMapMTBStackPanelRemoveControl: StackPanel not found: " & sStackPanelName)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBStackPanelRemoveControl")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH CONTROLS ******************************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetToolTipThs(	  rbnControl As This
						, ByVal sDescription As String
						, ByVal sText As String
						, ByVal sDisabledText As String
						)

Dim	rbnControlToolTip As This

OnError GoTo ErrorOccured

	If sDescription = "" Then
		sDescription = sText
	End If
	If sDisabledText = "" Then
		sDisabledText = sText
	End If

	'Create & Set the button tooltip
	rbnControlToolTip = New_MapInfoRibbonToolTip()
	Call SetMIRbnToolTipToolTipText (rbnControlToolTip, sText)
	Call SetMIRbnToolTipToolTipDescription (rbnControlToolTip, sDescription)
	Call SetMIRbnToolTipToolTipDisabledText (rbnControlToolTip, sDisabledText)

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			Call SetMICtrlToolTip(rbnControl, rbnControlToolTip)

		Case ControlType_ToolButton
			Call SetMICtrlToolTip(rbnControl, rbnControlToolTip)

		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlToolTip(rbnControl, rbnControlToolTip)

		Case ControlType_RibbonButtonPanel
			Call SetRbnBtnPnlToolTip(rbnControl, rbnControlToolTip)

'		Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemToolTip(rbnControl, rbnControlToolTip)

'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator

		Case ControlType_DropDownButton
			Call SetRbnDropDownCtrlToolTip(rbnControl, rbnControlToolTip)

		Case ControlType_SplitButton
			Call SetRbnSplitCtrlToolTip(rbnControl, rbnControlToolTip)

'		Case ControlType_DropDownMenuGroup

		Case ControlType_GalleryControl
			Call SetRbnGalleryCtrlToolTip(rbnControl, rbnControlToolTip)

		Case ControlType_GalleryItem
			Call SetRbnGalleryItemToolTip(rbnControl, rbnControlToolTip)

		Case ControlType_GalleryGroup
			Call SetRbnGalleryGrpToolTip(rbnControl, rbnControlToolTip)

'		Case ControlType_CustomControl
'		Case ControlType_TextBlock
'		Case ControlType_Image
'		Case ControlType_BackStageTabItem

		Case ControlType_BackStageButton
			Call SetIBackStageBtnToolTip(rbnControl, rbnControlToolTip)

		Case ControlType_BackStageTabSection
			Call SetIBackStageTabItemToolTip(rbnControl, rbnControlToolTip)

'		Case ControlType_BackStageSeparator

		Case ControlType_StackPanel
			Call SetIStackPanelToolTip(rbnControl, rbnControlToolTip)


'		Case
'			Call SetRbnItemToolTip(rbnControl, rbnControlToolTip)
'		Case
'			Call SetIMapMTBToolTip(rbnControl, rbnControlToolTip)
'		Case
'			Call SetRbnToolBtnCtrlToolTip(rbnControl, rbnControlToolTip)
'		Case
'			Call SetIBackStageOptionTabToolTip(rbnControl, rbnControlToolTip)
'		Case
'			Call SetRbnBtnCtrlToolTip(rbnControl, rbnControlToolTip)
	End Case

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnControlToolTip = NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetToolTipThs: ToolTips Text: " & sText)
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetToolTipIdx(	  ByVal nElementIdx As Integer
						, ByVal sDescription As String
						, ByVal sText As String
						, ByVal sDisabledText As String)

OnError GoTo ErrorOccured

	Call RBNControlSetToolTipThs(marrControls(nElementIdx), sDescription, sText, sDisabledText)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetToolTipIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetKeyGestureThs( rbnControl As This
						, ByVal sGesture As String		'For example "Ctrl+Y", "Alt+Ctrl+Y"
						)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			Call SetRbnBtnCtrlKeyGesture(rbnControl, sGesture)

		Case ControlType_ToolButton
			Call SetRbnToolBtnCtrlKeyGesture(rbnControl, sGesture)

		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlKeyGesture(rbnControl, sGesture)

'		Case ControlType_RibbonButtonPanel
'		Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemKeyGesture(rbnControl, sGesture)

'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator
'		Case ControlType_DropDownButton

		Case ControlType_SplitButton
			Call SetRbnSplitCtrlKeyGesture(rbnControl, sGesture)

'		Case ControlType_DropDownMenuGroup
'		Case ControlType_GalleryControl

		Case ControlType_GalleryItem
			Call SetRbnGalleryItemKeyGesture(rbnControl, sGesture)

'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock
'		Case ControlType_Image
'		Case ControlType_BackStageTabItem

		Case ControlType_BackStageButton
			Call SetIBackStageBtnKeyGesture(rbnControl, sGesture)
'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
'		Case ControlType_StackPanel
	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetKeyGestureThs: Gesture: " & sGesture)
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetKeyGestureIdx(	  ByVal nElementIdx As Integer
							, ByVal sGesture As String		'For example "Ctrl+Y", "Alt+Ctrl+Y"
							)

OnError GoTo ErrorOccured

	Call RBNControlSetKeyGestureThs(marrControls(nElementIdx), sGesture)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetKeyGestureIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetIconsThs( rbnControl As This
					, ByVal nSize As Integer
					, ByVal sSmallIcon As String
					, ByVal sLargeIcon As String
					)

OnError GoTo ErrorOccured

	If sSmallIcon = "" Then
		sSmallIcon = sLargeIcon
	End If
	If sLargeIcon = "" Then
		sLargeIcon = sSmallIcon
	End If

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			'Set the button icon
			Call SetRbnBtnCtrlIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))
			Call SetRbnBtnCtrlIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))
			Call SetRbnBtnCtrlLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
			Call SetRbnBtnCtrlSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

		Case ControlType_ToolButton
			'Set the button icon
			Call SetRbnToolBtnCtrlIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))
			Call SetRbnToolBtnCtrlIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))
			Call SetRbnToolBtnCtrlLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
			Call SetRbnToolBtnCtrlSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))
			Call SetRbnMenuItemCtrlIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))
			Call SetRbnMenuItemCtrlLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
			Call SetRbnMenuItemCtrlSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

'		Case ControlType_RibbonButtonPanel
'		Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			'Set the menu item icon
			'Call SetICntxtMnuMenuItemIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))	''Not supported ??
			'Call SetICntxtMnuMenuItemIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))			''Not supported ??
			Call SetICntxtMnuMenuItemLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
			Call SetICntxtMnuMenuItemSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator

		Case ControlType_DropDownButton
			Call SetRbnDropDownCtrlIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))
			Call SetRbnDropDownCtrlIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))
			Call SetRbnDropDownCtrlLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
			Call SetRbnDropDownCtrlSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

		Case ControlType_SplitButton
			Call SetRbnSplitCtrlIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))
			Call SetRbnSplitCtrlIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))
			Call SetRbnSplitCtrlLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
			Call SetRbnSplitCtrlSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

'		Case ControlType_DropDownMenuGroup

		Case ControlType_GalleryControl
			Call SetRbnGalleryCtrlIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))
			Call SetRbnGalleryCtrlIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))
			Call SetRbnGalleryCtrlLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
			Call SetRbnGalleryCtrlSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

		Case ControlType_GalleryItem
			Call SetRbnGalleryItemIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))
			Call SetRbnGalleryItemIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))
			Call SetRbnGalleryItemLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
			Call SetRbnGalleryItemSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock

		Case ControlType_Image
			Call SetIImageCtrlIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))
			Call SetIImageCtrlIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))
			Call SetIImageCtrlLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
			Call SetIImageCtrlSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

'		Case ControlType_BackStageTabItem

		Case ControlType_BackStageButton
			Call SetIBackStageBtnIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))
			Call SetIBackStageBtnIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))
			Call SetIBackStageBtnLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
			Call SetIBackStageBtnSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
'		Case ControlType_StackPanel

	End Case

	If mfDefaultLeftMarginInControls > 0 Then
		Call SetMICtrlLtMargin(rbnControl, mfDefaultLeftMarginInControls)
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetIconsThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetIconsIdx( ByVal nElementIdx As Integer
					, ByVal nSize As Integer
					, ByVal sSmallIcon As String
					, ByVal sLargeIcon As String)

OnError GoTo ErrorOccured

	Call RBNControlSetIconsThs(marrControls(nElementIdx), nSize, sSmallIcon, sLargeIcon)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetIconsIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetDefaultLeftMargin(	ByVal fMargin As Float)

OnError GoTo ErrorOccured

	mfDefaultLeftMarginInControls	= fMargin
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetDefaultLeftMargin")
	Call ERRShow()

End Sub

'		Case ControlType_Button
'		Case ControlType_ToolButton
'		Case ControlType_RibbonMenuItem
'		Case ControlType_RibbonButtonPanel
'		Case ControlType_RibbonSeparator
'		Case ControlType_ContextMenuItem
'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator
'		Case ControlType_DropDownButton
'		Case ControlType_SplitButton
'		Case ControlType_DropDownMenuGroup
'		Case ControlType_GalleryControl
'		Case ControlType_GalleryItem
'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock
'		Case ControlType_Image
'		Case ControlType_BackStageTabItem
'		Case ControlType_BackStageButton
'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
'		Case ControlType_StackPanel

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetLeftMarginThs( rbnControl As This
						, ByVal fMargin As Float
						)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			Call SetMICtrlLtMargin(rbnControl, fMargin)

		Case ControlType_ToolButton
			Call SetRbnToolBtnCtrlLtMargin(rbnControl, fMargin)

		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlLtMargin(rbnControl, fMargin)

		Case ControlType_RibbonButtonPanel
			Call SetRbnBtnPnlLtMargin(rbnControl, fMargin)

'		Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemLtMargin(rbnControl, fMargin)

'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator

		Case ControlType_DropDownButton
			Call SetRbnDropDownCtrlLtMargin(rbnControl, fMargin)

		Case ControlType_SplitButton
			Call SetRbnSplitCtrlLtMargin(rbnControl, fMargin)

'		Case ControlType_DropDownMenuGroup

		Case ControlType_GalleryControl
			Call SetRbnGalleryCtrlLtMargin(rbnControl, fMargin)

		Case ControlType_GalleryItem
			Call SetRbnGalleryItemLtMargin(rbnControl, fMargin)

		Case ControlType_GalleryGroup
			Call SetRbnGalleryGrpLtMargin(rbnControl, fMargin)

'		Case ControlType_CustomControl

		Case ControlType_TextBlock
			Call SetITextBlockLtMargin(rbnControl, fMargin)

		Case ControlType_Image
			Call SetIImageLtMargin(rbnControl, fMargin)

		Case ControlType_BackStageTabItem
			Call SetIBackStageTabItemLtMargin(rbnControl, fMargin)

		Case ControlType_BackStageButton
			Call SetIBackStageBtnLtMargin(rbnControl, fMargin)

		Case ControlType_BackStageTabSection
			Call SetIBackStageTabItemLtMargin(rbnControl, fMargin)

'		Case ControlType_BackStageSeparator

		Case ControlType_StackPanel
			Call SetIStackPanelLtMargin(rbnControl, fMargin)

	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetLeftMarginThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetLeftMarginIdx(	  ByVal nElementIdx As Integer
							, ByVal fMargin As Float
							)

OnError GoTo ErrorOccured

	Call RBNControlSetLeftMarginThs(marrControls(nElementIdx), fMargin)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetLeftMarginIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetCustomMBXHandlerThs(	  ByVal rbnControl As This
								, ByVal sMBXHandler As String
								)
OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			Call SetRbnBtnCtrlCallingHandler(rbnControl, sMBXHandler)

		Case ControlType_ToolButton
			Call SetRbnToolBtnCtrlCallingHandler(rbnControl, sMBXHandler)

		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlCallingHandler(rbnControl, sMBXHandler)

'		Case ControlType_RibbonButtonPanel
		'Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemCallingHandler(rbnControl, sMBXHandler)

		'Case ControlType_ContextMenuSeparator
		'Case ControlType_MenuItemSeparator
'		Case ControlType_DropDownButton

		Case ControlType_SplitButton
			Call SetRbnSplitCtrlCallingHandler(rbnControl, sMBXHandler)

'		Case ControlType_DropDownMenuGroup
'		Case ControlType_GalleryControl

		Case ControlType_GalleryItem
			Call SetRbnGalleryItemCallingHandler(rbnControl, sMBXHandler)

'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock
'		Case ControlType_Image
'		Case ControlType_BackStageTabItem

		Case ControlType_BackStageButton
			Call SetIBackStageBtnCallingHandler(rbnControl, sMBXHandler)

'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
'		Case ControlType_StackPanel
	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetCustomMBXHandlerThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetCustomMBXHandlerIdx(	  ByVal nElementIdx As Integer
								, ByVal sMBXHandler As String)
OnError GoTo ErrorOccured

	Call RBNControlSetCustomMBXHandlerThs(marrControls(nElementIdx), sMBXHandler)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetCustomMBXHandlerIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetCmdIDThs(	  ByVal rbnControl As This
						, ByVal nCmdID As Integer)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			Call SetRbnBtnCtrlCmdId(rbnControl, nCmdID)

		Case ControlType_ToolButton
			Call SetRbnToolBtnCtrlCmdId(rbnControl, nCmdID)

		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlCmdId(rbnControl, nCmdID)

'		Case ControlType_RibbonButtonPanel
		'Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemCmdId(rbnControl, nCmdID)

		'Case ControlType_ContextMenuSeparator
		'Case ControlType_MenuItemSeparator
'		Case ControlType_DropDownButton

		Case ControlType_SplitButton
			Call SetRbnSplitCtrlCmdId(rbnControl, nCmdID)

'		Case ControlType_DropDownMenuGroup
'		Case ControlType_GalleryControl

		Case ControlType_GalleryItem
			Call SetRbnGalleryItemCmdId(rbnControl, nCmdID)

'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock
'		Case ControlType_Image
'		Case ControlType_BackStageTabItem

		Case ControlType_BackStageButton
			Call SetIBackStageBtnCmdId(rbnControl, nCmdID)

'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
'		Case ControlType_StackPanel
	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetCmdIDThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetCmdIDIdx(	  ByVal nElementIdx As Integer
						, ByVal nCmdID As Integer
						)

OnError GoTo ErrorOccured

	Call RBNControlSetCmdIDThs(marrControls(nElementIdx), nCmdID)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetCmdIDIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetDrawModeThs(	  ByVal rbnControl As This
						, ByVal nDrawMode As Integer
						)
OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			'Doesn't have a drawmode
			'Call SetRbnBtnCtrlCallingHandler(rbnControl, sMBXHandler)
		Case ControlType_ToolButton
			Call SetRbnToolBtnCtrlDrawMode(rbnControl, nDrawMode)
		Case ControlType_ContextMenuItem
			'Not supported
		'Case ...	'Potentially this needs to be extended with other control types
	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetDrawModeThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetDrawModeIdx(	  ByVal nElementIdx As Integer
						, ByVal nDrawMode As Integer)

OnError GoTo ErrorOccured

	Call RBNControlSetDrawModeThs(marrControls(nElementIdx), nDrawMode)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetDrawModeIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetMICursorThs(	  ByVal rbnControl As This
						, ByVal nCursor As Integer
						, ByVal sFile As String
						)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			'Doesn't have a drawmode
			'Call SetRbnBtnCtrlCallingHandler(rbnControl, sMBXHandler)
		Case ControlType_ToolButton
			If sFile = "" Then
				Call SetRbnToolBtnCtrlCursorId(rbnControl, nCursor)
			Else
'				<ID> FILE <FILENAME>
				Call SetRbnToolBtnCtrlCursor(rbnControl, Str$(nCursor) & " File " & sFile)
			End If

		Case ControlType_ContextMenuItem
			'Not supported
		'Case ...	'Potentially this needs to be extended with other control types
	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetMICursorThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetMICursorIdx(	  ByVal nElementIdx As Integer
						, ByVal nCursor As Integer
						, ByVal sFile As String
						)

OnError GoTo ErrorOccured

	Call RBNControlSetMICursorThs(marrControls(nElementIdx), nCursor, sFile)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetMICursorIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlEnableThs(	  ByVal rbnControl As This
					, ByVal bEnabled As Logical)

Dim	sType As String

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			Call SetRbnBtnCtrlEnabled(rbnControl, bEnabled)

		Case ControlType_ToolButton
			Call SetRbnToolBtnCtrlEnabled(rbnControl, bEnabled)

		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlEnabled(rbnControl, bEnabled)

'		Case ControlType_RibbonButtonPanel
'		Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemEnabled(rbnControl, bEnabled)

'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator

		Case ControlType_DropDownButton
			Call SetRbnDropDownCtrlEnabled(rbnControl, bEnabled)

		Case ControlType_SplitButton
			Call SetRbnSplitCtrlEnabled(rbnControl, bEnabled)

'		Case ControlType_DropDownMenuGroup
'		Case ControlType_GalleryControl

		Case ControlType_GalleryItem
			Call SetRbnGalleryItemEnabled(rbnControl, bEnabled)

'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock
'		Case ControlType_Image
'		Case ControlType_BackStageTabItem

		Case ControlType_BackStageButton
			Call SetIBackStageBtnEnabled(rbnControl, bEnabled)

'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
'		Case ControlType_StackPanel

	End Case
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlEnableThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlEnableIdx(	  ByVal nElementIdx As Integer
					, ByVal bEnabled As Logical)

OnError GoTo ErrorOccured

	Call RBNControlEnableThs(marrControls(nElementIdx), bEnabled)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlEnableIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlCheckThs(	  ByVal rbnControl As This
					, ByVal bChecked As Logical)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
'		Case ControlType_Button
'		Case ControlType_ToolButton

		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlIsChecked(rbnControl, bChecked)

'		Case ControlType_RibbonButtonPanel
'		Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemIsChecked(rbnControl, bChecked)

'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator
'		Case ControlType_DropDownButton
'		Case ControlType_SplitButton
'		Case ControlType_DropDownMenuGroup
'		Case ControlType_GalleryControl

		Case ControlType_GalleryItem
			Call SetRbnGalleryItemIsChecked(rbnControl, bChecked)

'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock
'		Case ControlType_Image
'		Case ControlType_BackStageTabItem
'		Case ControlType_BackStageButton
'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
'		Case ControlType_StackPanel

	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlCheckThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlCheckIdx(	  ByVal nElementIdx As Integer
					, ByVal bChecked As Logical
					)

OnError GoTo ErrorOccured

	Call RBNControlCheckThs(marrControls(nElementIdx), bChecked)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlCheckIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSelectedThs(	  ByVal rbnControl As This
						, ByVal bSelected As Logical
						)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
'			Call DEBUGPrint("SetRbnBtnCtrlIsSelected(rbnControl, " & bSelected)
			Call SetRbnBtnCtrlIsSelected(rbnControl, bSelected)
'		Case ControlType_ToolButton
		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlIsChecked(rbnControl, bSelected)
'		Case ControlType_RibbonButtonPanel
'		Case ControlType_RibbonSeparator
		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemIsChecked(rbnControl, bSelected)
'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator
'		Case ControlType_DropDownButton
'		Case ControlType_SplitButton
'		Case ControlType_DropDownMenuGroup
'		Case ControlType_GalleryControl
		Case ControlType_GalleryItem
			Call SetRbnGalleryItemIsChecked(rbnControl, bSelected)
'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock
'		Case ControlType_Image
'		Case ControlType_BackStageTabItem
		Case ControlType_BackStageButton
			Call SetIBackStageBtnIsSelected(rbnControl, bSelected)
'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
'		Case ControlType_StackPanel

	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSelectedThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSelectedIdx(	  ByVal nElementIdx As Integer
						, ByVal bSelected As Logical
					)

OnError GoTo ErrorOccured

	Call RBNControlSelectedThs(marrControls(nElementIdx), bSelected)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSelectedIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlToggleThs(	  ByVal rbnControl As This
					, ByVal bIsToggle As Logical
					)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			Call SetRbnBtnCtrlIsToggle(rbnControl, bIsToggle)
'		Case ControlType_ToolButton
		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlIsCheckable(rbnControl, bIsToggle)
'		Case ControlType_RibbonButtonPanel
'		Case ControlType_RibbonSeparator
		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemIsCheckable(rbnControl, bIsToggle)
'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator
'		Case ControlType_DropDownButton
'		Case ControlType_SplitButton
'		Case ControlType_DropDownMenuGroup
'		Case ControlType_GalleryControl
'		Case ControlType_GalleryItem
'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock
'		Case ControlType_Image
'		Case ControlType_BackStageTabItem
'		Case ControlType_BackStageButton
'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
'		Case ControlType_StackPanel

	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlToggleThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlToggleIdx(	  ByVal nElementIdx As Integer
					, ByVal bIsToggle As Logical
					)

OnError GoTo ErrorOccured

	Call RBNControlToggleThs(marrControls(nElementIdx), bIsToggle)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlToggleIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNControlGetControlIDThs(	  ByVal rbnControl As This
								)  As Integer	'Will return the ID of the control used CommandInfo(CMD_INFO_MENUITEM) and CommandInfo(CMD_INFO_TOOLBTN)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			RBNControlGetControlIDThs	= GetMICtrlCtrlId(rbnControl)

		Case ControlType_ToolButton
			RBNControlGetControlIDThs	= GetRbnToolBtnCtrlCtrlId(rbnControl)

		Case ControlType_RibbonMenuItem
			RBNControlGetControlIDThs	= GetRbnMenuItemCtrlCtrlId(rbnControl)

		Case ControlType_RibbonButtonPanel
			RBNControlGetControlIDThs	= GetRbnBtnPnlCtrlId(rbnControl)
		'Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			RBNControlGetControlIDThs	= GetICntxtMnuMenuItemCtrlId(rbnControl)

		'Case ControlType_ContextMenuSeparator
		'Case ControlType_MenuItemSeparator

		Case ControlType_DropDownButton
			RBNControlGetControlIDThs	= GetRbnDropDownCtrlCtrlId(rbnControl)

		Case ControlType_SplitButton
			RBNControlGetControlIDThs	= GetRbnSplitCtrlCtrlId(rbnControl)

'		Case ControlType_DropDownMenuGroup
		Case ControlType_GalleryControl
			RBNControlGetControlIDThs	= GetRbnGalleryCtrlCtrlId(rbnControl)

		Case ControlType_GalleryItem
			RBNControlGetControlIDThs	= GetRbnGalleryItemCtrlId(rbnControl)

		Case ControlType_GalleryGroup
			RBNControlGetControlIDThs	= GetRbnGalleryGrpCtrlId(rbnControl)

		Case ControlType_CustomControl
			RBNControlGetControlIDThs	= GetRbnCustomCtrlCtrlId(rbnControl)

		Case ControlType_TextBlock
			RBNControlGetControlIDThs	= GetITextBlockCtrlId(rbnControl)

		Case ControlType_Image
			RBNControlGetControlIDThs	= GetIImageCtrlId(rbnControl)

		Case ControlType_BackStageTabItem
			RBNControlGetControlIDThs	= GetIBackStageTabItemCtrlId(rbnControl)

		Case ControlType_BackStageButton
			RBNControlGetControlIDThs	= GetIBackStageBtnCtrlId(rbnControl)

'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
		Case ControlType_StackPanel
			RBNControlGetControlIDThs	= GetIStackPanelCtrlId(rbnControl)

	End Case
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlGetControlIDThs")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNControlGetControlIDIdx(  nElementIdx As Integer
								)  As Integer	'Will return the ID of the control used CommandInfo(CMD_INFO_MENUITEM) and CommandInfo(CMD_INFO_TOOLBTN)
OnError GoTo ErrorOccured

	RBNControlGetControlIDIdx = RBNControlGetControlIDThs(marrControls(nElementIdx))
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "PleaseEnterNameOfFunctionHere")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNControlGetIndex(	  ByVal sTabName As String
						, ByVal sGroupName As String
						, ByVal sControlName As String
						) As Integer

Dim	rbnTab As This,
	rbnGroup As This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr

OnError GoTo ErrorOccured

RBNControlGetIndex = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then

			rbnGroup = rbnGroupFound

			RBNControlGetIndex = RBNGroupGetControlIndexThs(rbnGroup, sControlName)
			Exit Function
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTab		= NULL_PTR
	rbnGroup		= NULL_PTR
	rbnTabFound	= NULL_PTR
	rbnGroupFound	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlGetIndex")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNAddElement(	  ByVal sTabName As String
					, ByVal sGroupName As String
					, ByVal sSplitButtonName As String
					, ByVal sSplitButtonGroupName As String
					, ByVal sControlName As String
					, ByVal nControlType As Integer
					) As Integer

OnError GoTo ErrorOccured

RBNAddElement = 0

	mnNumElements = mnNumElements + 1
	Redim marrControls(mnNumElements)
	Redim marrTabNames(mnNumElements)
	Redim marrGroupNames(mnNumElements)
	Redim marrControlNames(mnNumElements)
	Redim marrSplitButtonNames(mnNumElements)
	Redim marrSplitButtonGroupNames(mnNumElements)
	Redim marrControlTypes(mnNumElements)

	marrTabNames(mnNumElements)				= sTabName
	marrGroupNames(mnNumElements)				= sGroupName
	marrControlNames(mnNumElements)			= sControlName
	marrSplitButtonNames(mnNumElements)		= sSplitButtonName
	marrSplitButtonGroupNames(mnNumElements)	= sSplitButtonGroupName
	marrControlTypes(mnNumElements)			= nControlType

	RBNAddElement = mnNumElements

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNAddElement")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNRemoveElement( ByVal sTabName As String
					, ByVal sGroupName As String
					, ByVal sSplitButtonName As String
					, ByVal sSplitButtonGroupName As String
					, ByVal sControlName As String
					) As Integer

Dim	nElementIdx, i As Integer

OnError GoTo ErrorOccured

RBNRemoveElement = 0

	nElementIdx = RBNGetElementIndex(sTabName, sGroupName, sSplitButtonName, sSplitButtonGroupName, sControlName)
	If nElementIdx > 0 Then
		For i = nElementIdx To (mnNumElements - 1)
			marrControls(nElementIdx)			= NULL_PTR
			marrControls(nElementIdx)			= marrControls(nElementIdx + 1)
			marrTabNames(nElementIdx)			= marrTabNames(nElementIdx + 1)
			marrGroupNames(nElementIdx)			= marrGroupNames(nElementIdx + 1)
			marrControlNames(nElementIdx)			= marrControlNames(nElementIdx + 1)
			marrSplitButtonNames(nElementIdx) 		= marrSplitButtonNames(nElementIdx + 1)
			marrSplitButtonGroupNames(nElementIdx)	= marrSplitButtonGroupNames(nElementIdx + 1)
			marrControlTypes(nElementIdx)			= marrControlTypes(nElementIdx + 1)
		Next

		marrControls(mnNumElements)	= NULL_PTR
		mnNumElements = mnNumElements - 1
		Redim marrControls(mnNumElements)
		Redim marrTabNames(mnNumElements)
		Redim marrGroupNames(mnNumElements)
		Redim marrControlNames(mnNumElements)
		Redim marrSplitButtonNames(mnNumElements)
		Redim marrSplitButtonGroupNames(mnNumElements)
		Redim marrControlTypes(mnNumElements)
	End If

RBNRemoveElement = nElementIdx

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNRemoveElement")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGetElementIndex(	  ByVal sTabName As String
						, ByVal sGroupName As String
						, ByVal sSplitButtonName As String
						, ByVal sSplitButtonGroupName As String
						, ByVal sControlName As String
						) As Integer

Dim	nElement As Integer

OnError GoTo ErrorOccured

RBNGetElementIndex = 0

	RBNGetElementIndex = RBNGetElementIndexOffset(sTabName, sGroupName, sSplitButtonName, sSplitButtonGroupName, sControlName, 1)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetElementIndex")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGetElementIndexOffset(	  ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sSplitButtonName As String
							, ByVal sSplitButtonGroupName As String
							, ByVal sControlName As String
							, ByVal nOffset As Integer
							) As Integer

Dim	nElement As Integer

OnError GoTo ErrorOccured

RBNGetElementIndexOffset = 0

'	Call DEBUGPrint(sTabName & " | " & sGroupName & " | " & sControlName & " | " & sSplitButtonName & " | " & sSplitButtonGroupName)
	For nElement = nOffset To mnNumElements
		If sTabName = marrTabNames(nElement) OR sTabName = "" Then
			If sGroupName = marrGroupNames(nElement) OR sGroupName = "" Then
				If sControlName = marrControlNames(nElement) OR sControlName = "" Then
					If sSplitButtonName = marrSplitButtonNames(nElement) OR sSplitButtonName = "" Then
						If sSplitButtonGroupName = marrSplitButtonGroupNames(nElement) OR sSplitButtonGroupName = "" Then
							RBNGetElementIndexOffset = nElement
							Exit Function
						End If
					End If
				End If
			End If
		End If
	Next

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetElementIndexOffset")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNClearCustomRibbonElements

Dim	bRemoved as Logical,
	i, nResult, nTabIndex, nGroupIndex As Integer,
	rbnTab As This,
	rbnGroupsColl As This,
	rbnGroupItem As This,
	rbnControlsColl As This,
	rbnControl As RefPtr

OnError GoTo ErrorOccured

	Call RBNInitiate

'	Call DEBUGPrint("Removing Controls from the ribbon")
	For i = mnNumElements To 1 Step -1
'		Call DEBUGPrint("   " & i & " Tab: " & marrTabNames(i) & " | Group: " & marrGroupNames(i) & " | SplitButton: " & marrSplitButtonNames(i) & " | SplitButtonGroup: " & marrSplitButtonGroupNames(i) & " | Control: " & marrControlNames(i))

		If NOT marrSplitButtonGroupNames(i) = "" Then
			If NOT marrControlNames(i) = "" Then
				If marrControlTypes(i) = ControlType_SplitButton Then
					'**Remove SplitButton Control
					nResult = RBNSplitButtonGroupRemoveControl(  marrControlNames(i), marrTabNames(i), marrGroupNames(i), marrSplitButtonNames(i), marrSplitButtonGroupNames(i))
	'				Call DEBUGPrint("   " & i & " Control Removed Result: " & nResult)
				ElseIf marrControlTypes(i) = ControlType_DropDownButton Then
					'**Remove DropDownButton Control
					nResult = RBNDropDButtonGroupRemoveControl(  marrControlNames(i), marrTabNames(i), marrGroupNames(i), marrSplitButtonNames(i), marrSplitButtonGroupNames(i))
	'				Call DEBUGPrint("   " & i & " Control Removed Result: " & nResult)
				End If
			Else
				If marrControlTypes(i) = ControlType_SplitButton Then
					nResult = RBNSplitButtonGroupRemove(marrSplitButtonGroupNames(i), marrTabNames(i), marrGroupNames(i), marrSplitButtonNames(i))
'					Call DEBUGPrint("   " & i & " SplitButton Group Removed Result: " & nResult)
				ElseIf marrControlTypes(i) = ControlType_DropDownButton Then
					nResult = RBNDropDButtonGroupRemove(marrSplitButtonGroupNames(i), marrTabNames(i), marrGroupNames(i), marrSplitButtonNames(i))
'					Call DEBUGPrint("   " & i & " DropDownButton Group Removed Result: " & nResult)
				End If
			End If
		ElseIf NOT marrControlNames(i) = "" Then
			'**Remove Control
			If marrTabNames(i) = "ToolContextMenu" Then
				nResult = RBNToolContextMenuRemoveMenuItem(marrControlNames(i))
'				Call DEBUGPrint("   " & i & " Control Removed Result: " & nResult)
			ElseIf marrTabNames(i) = "MapMiniToolbar" Then
				If marrGroupNames(i) = "" Then
					nResult = RBNMapMTBRemoveControl(marrControlNames(i))
'					Call DEBUGPrint("   " & i & " Control Removed Result: " & nResult)
				Else
					nResult = RBNMapMTBStackPanelRemoveControl(marrControlNames(i), marrGroupNames(i))
'					Call DEBUGPrint("   " & i & " Control Removed Result: " & nResult)
				End If
			Else
				nResult = RBNGroupRemoveControl(marrControlNames(i), marrTabNames(i), marrGroupNames(i))
'				Call DEBUGPrint("   " & i & " Control Removed Result: " & nResult)
			End If
		ElseIf NOT marrGroupNames(i) = "" Then
			If RBNGroupNumControls(marrGroupNames(i), marrTabNames(i)) = 0 Then
				'**Remove Group
				nResult = RBNTabGroupRemove(marrGroupNames(i), marrTabNames(i))
'				Call DEBUGPrint("   " & i & " Group Removed Result: " & nResult)
			Else
'				Call DEBUGPrint("   " & i & " Group has still Controls")
			End If
		Else
			If RBNTabNumGroups(marrTabNames(i)) = 0 Then
				'**Remove Tab
				nResult = RBNRemoveTab(marrTabNames(i))
'				Call DEBUGPrint("   " & i & " Tab Removed Result: " & nResult)
			Else
'				Call DEBUGPrint("   " & i & " Tab has still Groups")
			End If
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTab			= NULL_PTR
	rbnGroupsColl		= NULL_PTR
	rbnGroupItem		= NULL_PTR
	rbnControlsColl	= NULL_PTR
	rbnControl		= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNClearCustomRibbonElements: Ctrl Group Index: " & i & " Tab: " & marrTabNames(i) & ", Group: " & marrGroupNames(i) & ", Control: " & marrControlNames(i))
	Call ERRShow()
	Resume Next

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNEndHandler

Dim	i As Integer

OnError GoTo ErrorOccured

	Call RBNClearCustomRibbonElements
	If NOT RBNEventUnsubscribeAll() Then
		'**Whoops, not all events were unsubscribed from
	End If

	theMapInfoApplication		= NULL_PTR
	theMapBasicApplication		= NULL_PTR
	theMapInfoEvents			= NULL_PTR
	theStatusbar				= NULL_PTR
	theRibbon					= NULL_PTR
	theToolContextMenu			= NULL_PTR
	theTabsColl				= NULL_PTR
	theToolContextMenuItemsColl	= NULL_PTR
	theContextMenus			= NULL_PTR
	theMapMTB					= NULL_PTR
	theMapMTBControlsColl		= NULL_PTR
	theNotification			= NULL_PTR

	For i = 1 To Ubound(marrControls)
		marrControls(i)	= NULL_PTR
	Next
	Redim marrControls(0)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNEndHandler")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNEventSubscribe(	  ByVal nEventType As Integer
						, ByVal sMBXHandler As String
						) As Logical

Dim	bWasSubscribed As Logical

OnError GoTo ErrorOccured

RBNEventSubscribe = FALSE

	Call RBNInitiate

'	Call DEBUGPrint("MIEventsSubscribe(theMapInfoEvents, " & nEventType & ", " & sMBXHandler & ")")
	bWasSubscribed = MIEventsSubscribe(theMapInfoEvents, nEventType, sMBXHandler)

	If bWasSubscribed Then
		mnNumEvents	= mnNumEvents + 1
		Redim marrEventTypes(mnNumEvents)
		Redim marrEventMBXHandlers(mnNumEvents)
		marrEventTypes(mnNumEvents)		= nEventType
		marrEventMBXHandlers(mnNumEvents)	= sMBXHandler
		RBNEventSubscribe = TRUE
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNEventSubscribe")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNEventUnsubscribe(	  ByVal nEventType As Integer
						, ByVal sMBXHandler As String
						) As Logical

Dim	bWasUnsubscribed As Logical,
	i As Integer

OnError GoTo ErrorOccured

RBNEventUnsubscribe = FALSE

	Call RBNInitiate

'	Call DEBUGPrint("MIEventsUnSubscribe(theMapInfoEvents, " & nEventType & ", " & sMBXHandler & ")")
	bWasUnsubscribed	= MIEventsUnSubscribe(theMapInfoEvents, nEventType, sMBXHandler)
	If bWasUnsubscribed Then
		For i = 1 To mnNumEvents
			If marrEventTypes(i) = nEventType Then
				If marrEventMBXHandlers(i) = sMBXHandler Then
					Call ARRAYRemoveItemString(marrEventMBXHandlers, i)
					Call ARRAYRemoveItemInteger(marrEventTypes, i)
					mnNumEvents	= mnNumEvents - 1
				End If
			End If
		Next
	End If

	RBNEventUnsubscribe = bWasUnsubscribed

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNEventUnsubscribe")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNEventUnsubscribeAll() As Logical

Dim	bWasUnsubscribed As Logical,
	i As Integer

OnError GoTo ErrorOccured

RBNEventUnsubscribeAll = FALSE

	Call RBNInitiate

	For i = mnNumEvents To 1 Step -1
		bWasUnsubscribed	= MIEventsUnSubscribe(theMapInfoEvents, marrEventTypes(i), marrEventMBXHandlers(i))
		If bWasUnsubscribed Then
			Call ARRAYRemoveItemString(marrEventMBXHandlers, i)
			Call ARRAYRemoveItemInteger(marrEventTypes, i)
			mnNumEvents	= mnNumEvents - 1
		End If
	Next

	RBNEventUnsubscribeAll = (mnNumEvents = 0)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNEventUnsubscribeAll")
	Call ERRShow()

End Function

'**********************************************************************************************''
'**** N O T I F I C A T I O N *****************************************************************''
'**********************************************************************************************''

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNNotificationShow(	  ByVal sTitle As String
					, ByVal sMessage As String
					, ByVal nNotificationType As Integer
					, ByVal nTimeToShow As Integer
					)

Dim	refNotification As RefPtr

OnError GoTo ErrorOccured

	Call RBNInitiate

	Call SetNotificationObjectMessage(theNotification, sMessage)
	Call SetNotificationObjectTitle(theNotification, sTitle)
	Call SetNotificationObjectType(theNotification, nNotificationType)

	If nTimeToShow <= 0 Then
		nTimeToShow = 10000
	End If
	Call SetNotificationObjectTimeToShow(theNotification, nTimeToShow)

	refNotification	= theNotification
	Call ShowNotification(theMapInfoApplication, refNotification)

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	refNotification	= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNNotificationShow")
	Call ERRShow()

End Sub

